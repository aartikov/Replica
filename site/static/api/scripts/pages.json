[
  {
    "name": "abstract fun launch()",
    "description": "me.aartikov.replica.devtools.ReplicaDevTools.launch",
    "location": "replica-devtools/me.aartikov.replica.devtools/-replica-dev-tools/launch.html",
    "searchKeys": [
      "launch",
      "abstract fun launch()",
      "me.aartikov.replica.devtools.ReplicaDevTools.launch"
    ]
  },
  {
    "name": "data class DevToolsSettings(val port: Int = 8080)",
    "description": "me.aartikov.replica.devtools.DevToolsSettings",
    "location": "replica-devtools/me.aartikov.replica.devtools/-dev-tools-settings/index.html",
    "searchKeys": [
      "DevToolsSettings",
      "data class DevToolsSettings(val port: Int = 8080)",
      "me.aartikov.replica.devtools.DevToolsSettings"
    ]
  },
  {
    "name": "fun DevToolsSettings(port: Int = 8080)",
    "description": "me.aartikov.replica.devtools.DevToolsSettings.DevToolsSettings",
    "location": "replica-devtools/me.aartikov.replica.devtools/-dev-tools-settings/-dev-tools-settings.html",
    "searchKeys": [
      "DevToolsSettings",
      "fun DevToolsSettings(port: Int = 8080)",
      "me.aartikov.replica.devtools.DevToolsSettings.DevToolsSettings"
    ]
  },
  {
    "name": "fun ReplicaDevTools(replicaClient: ReplicaClient, applicationContext: Context, settings: DevToolsSettings = DevToolsSettings()): ReplicaDevTools",
    "description": "me.aartikov.replica.devtools.ReplicaDevTools",
    "location": "replica-devtools/me.aartikov.replica.devtools/-replica-dev-tools.html",
    "searchKeys": [
      "ReplicaDevTools",
      "fun ReplicaDevTools(replicaClient: ReplicaClient, applicationContext: Context, settings: DevToolsSettings = DevToolsSettings()): ReplicaDevTools",
      "me.aartikov.replica.devtools.ReplicaDevTools"
    ]
  },
  {
    "name": "interface ReplicaDevTools",
    "description": "me.aartikov.replica.devtools.ReplicaDevTools",
    "location": "replica-devtools/me.aartikov.replica.devtools/-replica-dev-tools/index.html",
    "searchKeys": [
      "ReplicaDevTools",
      "interface ReplicaDevTools",
      "me.aartikov.replica.devtools.ReplicaDevTools"
    ]
  },
  {
    "name": "val port: Int = 8080",
    "description": "me.aartikov.replica.devtools.DevToolsSettings.port",
    "location": "replica-devtools/me.aartikov.replica.devtools/-dev-tools-settings/port.html",
    "searchKeys": [
      "port",
      "val port: Int = 8080",
      "me.aartikov.replica.devtools.DevToolsSettings.port"
    ]
  },
  {
    "name": "abstract fun launch()",
    "description": "me.aartikov.replica.devtools.ReplicaDevTools.launch",
    "location": "replica-devtools-noop/me.aartikov.replica.devtools/-replica-dev-tools/launch.html",
    "searchKeys": [
      "launch",
      "abstract fun launch()",
      "me.aartikov.replica.devtools.ReplicaDevTools.launch"
    ]
  },
  {
    "name": "data class DevToolsSettings(val port: Int = 8080)",
    "description": "me.aartikov.replica.devtools.DevToolsSettings",
    "location": "replica-devtools-noop/me.aartikov.replica.devtools/-dev-tools-settings/index.html",
    "searchKeys": [
      "DevToolsSettings",
      "data class DevToolsSettings(val port: Int = 8080)",
      "me.aartikov.replica.devtools.DevToolsSettings"
    ]
  },
  {
    "name": "fun DevToolsSettings(port: Int = 8080)",
    "description": "me.aartikov.replica.devtools.DevToolsSettings.DevToolsSettings",
    "location": "replica-devtools-noop/me.aartikov.replica.devtools/-dev-tools-settings/-dev-tools-settings.html",
    "searchKeys": [
      "DevToolsSettings",
      "fun DevToolsSettings(port: Int = 8080)",
      "me.aartikov.replica.devtools.DevToolsSettings.DevToolsSettings"
    ]
  },
  {
    "name": "fun ReplicaDevTools(replicaClient: ReplicaClient, applicationContext: Context, settings: DevToolsSettings = DevToolsSettings()): ReplicaDevTools",
    "description": "me.aartikov.replica.devtools.ReplicaDevTools",
    "location": "replica-devtools-noop/me.aartikov.replica.devtools/-replica-dev-tools.html",
    "searchKeys": [
      "ReplicaDevTools",
      "fun ReplicaDevTools(replicaClient: ReplicaClient, applicationContext: Context, settings: DevToolsSettings = DevToolsSettings()): ReplicaDevTools",
      "me.aartikov.replica.devtools.ReplicaDevTools"
    ]
  },
  {
    "name": "interface ReplicaDevTools",
    "description": "me.aartikov.replica.devtools.ReplicaDevTools",
    "location": "replica-devtools-noop/me.aartikov.replica.devtools/-replica-dev-tools/index.html",
    "searchKeys": [
      "ReplicaDevTools",
      "interface ReplicaDevTools",
      "me.aartikov.replica.devtools.ReplicaDevTools"
    ]
  },
  {
    "name": "val port: Int = 8080",
    "description": "me.aartikov.replica.devtools.DevToolsSettings.port",
    "location": "replica-devtools-noop/me.aartikov.replica.devtools/-dev-tools-settings/port.html",
    "searchKeys": [
      "port",
      "val port: Int = 8080",
      "me.aartikov.replica.devtools.DevToolsSettings.port"
    ]
  },
  {
    "name": "fun <K : Any, T : Any, R : Any> KeyedReplica<K, T>.map(transform: (T) -> R): KeyedReplica<K, R>",
    "description": "me.aartikov.replica.algebra.map",
    "location": "replica-algebra/me.aartikov.replica.algebra/map.html",
    "searchKeys": [
      "map",
      "fun <K : Any, T : Any, R : Any> KeyedReplica<K, T>.map(transform: (T) -> R): KeyedReplica<K, R>",
      "me.aartikov.replica.algebra.map"
    ]
  },
  {
    "name": "fun <K : Any, T : Any> KeyedReplica<K, T>.withKey(key: K): Replica<T>",
    "description": "me.aartikov.replica.algebra.withKey",
    "location": "replica-algebra/me.aartikov.replica.algebra/with-key.html",
    "searchKeys": [
      "withKey",
      "fun <K : Any, T : Any> KeyedReplica<K, T>.withKey(key: K): Replica<T>",
      "me.aartikov.replica.algebra.withKey"
    ]
  },
  {
    "name": "fun <K : Any, T : Any> associate(replicaProvider: (K) -> Replica<T>): KeyedReplica<K, T>",
    "description": "me.aartikov.replica.algebra.associate",
    "location": "replica-algebra/me.aartikov.replica.algebra/associate.html",
    "searchKeys": [
      "associate",
      "fun <K : Any, T : Any> associate(replicaProvider: (K) -> Replica<T>): KeyedReplica<K, T>",
      "me.aartikov.replica.algebra.associate"
    ]
  },
  {
    "name": "fun <T : Any, R : Any> Replica<T>.map(transform: (T) -> R): Replica<R>",
    "description": "me.aartikov.replica.algebra.map",
    "location": "replica-algebra/me.aartikov.replica.algebra/map.html",
    "searchKeys": [
      "map",
      "fun <T : Any, R : Any> Replica<T>.map(transform: (T) -> R): Replica<R>",
      "me.aartikov.replica.algebra.map"
    ]
  },
  {
    "name": "fun <T : Any> constReplica(data: T): Replica<T>",
    "description": "me.aartikov.replica.algebra.constReplica",
    "location": "replica-algebra/me.aartikov.replica.algebra/const-replica.html",
    "searchKeys": [
      "constReplica",
      "fun <T : Any> constReplica(data: T): Replica<T>",
      "me.aartikov.replica.algebra.constReplica"
    ]
  },
  {
    "name": "fun <T : Any> flowReplica(flow: Flow<T>): Replica<T>",
    "description": "me.aartikov.replica.algebra.flowReplica",
    "location": "replica-algebra/me.aartikov.replica.algebra/flow-replica.html",
    "searchKeys": [
      "flowReplica",
      "fun <T : Any> flowReplica(flow: Flow<T>): Replica<T>",
      "me.aartikov.replica.algebra.flowReplica"
    ]
  },
  {
    "name": "fun <T1 : Any, T2 : Any, R : Any> combine(replica1: Replica<T1>, replica2: Replica<T2>, transform: (T1, T2) -> R): Replica<R>",
    "description": "me.aartikov.replica.algebra.combine",
    "location": "replica-algebra/me.aartikov.replica.algebra/combine.html",
    "searchKeys": [
      "combine",
      "fun <T1 : Any, T2 : Any, R : Any> combine(replica1: Replica<T1>, replica2: Replica<T2>, transform: (T1, T2) -> R): Replica<R>",
      "me.aartikov.replica.algebra.combine"
    ]
  },
  {
    "name": "fun <T1 : Any, T2 : Any, R : Any> combineEager(replica1: Replica<T1>, replica2: Replica<T2>, transform: (T1?, T2?) -> R): Replica<R>",
    "description": "me.aartikov.replica.algebra.combineEager",
    "location": "replica-algebra/me.aartikov.replica.algebra/combine-eager.html",
    "searchKeys": [
      "combineEager",
      "fun <T1 : Any, T2 : Any, R : Any> combineEager(replica1: Replica<T1>, replica2: Replica<T2>, transform: (T1?, T2?) -> R): Replica<R>",
      "me.aartikov.replica.algebra.combineEager"
    ]
  },
  {
    "name": "fun <T1 : Any, T2 : Any, T3 : Any, R : Any> combine(replica1: Replica<T1>, replica2: Replica<T2>, replica3: Replica<T3>, transform: (T1, T2, T3) -> R): Replica<R>",
    "description": "me.aartikov.replica.algebra.combine",
    "location": "replica-algebra/me.aartikov.replica.algebra/combine.html",
    "searchKeys": [
      "combine",
      "fun <T1 : Any, T2 : Any, T3 : Any, R : Any> combine(replica1: Replica<T1>, replica2: Replica<T2>, replica3: Replica<T3>, transform: (T1, T2, T3) -> R): Replica<R>",
      "me.aartikov.replica.algebra.combine"
    ]
  },
  {
    "name": "fun <T1 : Any, T2 : Any, T3 : Any, R : Any> combineEager(replica1: Replica<T1>, replica2: Replica<T2>, replica3: Replica<T3>, transform: (T1?, T2?, T3?) -> R): Replica<R>",
    "description": "me.aartikov.replica.algebra.combineEager",
    "location": "replica-algebra/me.aartikov.replica.algebra/combine-eager.html",
    "searchKeys": [
      "combineEager",
      "fun <T1 : Any, T2 : Any, T3 : Any, R : Any> combineEager(replica1: Replica<T1>, replica2: Replica<T2>, replica3: Replica<T3>, transform: (T1?, T2?, T3?) -> R): Replica<R>",
      "me.aartikov.replica.algebra.combineEager"
    ]
  },
  {
    "name": "fun <T1 : Any, T2 : Any, T3 : Any, T4 : Any, R : Any> combine(replica1: Replica<T1>, replica2: Replica<T2>, replica3: Replica<T3>, replica4: Replica<T4>, transform: (T1, T2, T3, T4) -> R): Replica<R>",
    "description": "me.aartikov.replica.algebra.combine",
    "location": "replica-algebra/me.aartikov.replica.algebra/combine.html",
    "searchKeys": [
      "combine",
      "fun <T1 : Any, T2 : Any, T3 : Any, T4 : Any, R : Any> combine(replica1: Replica<T1>, replica2: Replica<T2>, replica3: Replica<T3>, replica4: Replica<T4>, transform: (T1, T2, T3, T4) -> R): Replica<R>",
      "me.aartikov.replica.algebra.combine"
    ]
  },
  {
    "name": "fun <T1 : Any, T2 : Any, T3 : Any, T4 : Any, R : Any> combineEager(replica1: Replica<T1>, replica2: Replica<T2>, replica3: Replica<T3>, replica4: Replica<T4>, transform: (T1?, T2?, T3?, T4?) -> R): Replica<R>",
    "description": "me.aartikov.replica.algebra.combineEager",
    "location": "replica-algebra/me.aartikov.replica.algebra/combine-eager.html",
    "searchKeys": [
      "combineEager",
      "fun <T1 : Any, T2 : Any, T3 : Any, T4 : Any, R : Any> combineEager(replica1: Replica<T1>, replica2: Replica<T2>, replica3: Replica<T3>, replica4: Replica<T4>, transform: (T1?, T2?, T3?, T4?) -> R): Replica<R>",
      "me.aartikov.replica.algebra.combineEager"
    ]
  },
  {
    "name": "fun <T1 : Any, T2 : Any, T3 : Any, T4 : Any, T5 : Any, R : Any> combine(replica1: Replica<T1>, replica2: Replica<T2>, replica3: Replica<T3>, replica4: Replica<T4>, replica5: Replica<T5>, transform: (T1, T2, T3, T4, T5) -> R): Replica<R>",
    "description": "me.aartikov.replica.algebra.combine",
    "location": "replica-algebra/me.aartikov.replica.algebra/combine.html",
    "searchKeys": [
      "combine",
      "fun <T1 : Any, T2 : Any, T3 : Any, T4 : Any, T5 : Any, R : Any> combine(replica1: Replica<T1>, replica2: Replica<T2>, replica3: Replica<T3>, replica4: Replica<T4>, replica5: Replica<T5>, transform: (T1, T2, T3, T4, T5) -> R): Replica<R>",
      "me.aartikov.replica.algebra.combine"
    ]
  },
  {
    "name": "fun <T1 : Any, T2 : Any, T3 : Any, T4 : Any, T5 : Any, R : Any> combineEager(replica1: Replica<T1>, replica2: Replica<T2>, replica3: Replica<T3>, replica4: Replica<T4>, replica5: Replica<T5>, transform: (T1?, T2?, T3?, T4?, T5?) -> R): Replica<R>",
    "description": "me.aartikov.replica.algebra.combineEager",
    "location": "replica-algebra/me.aartikov.replica.algebra/combine-eager.html",
    "searchKeys": [
      "combineEager",
      "fun <T1 : Any, T2 : Any, T3 : Any, T4 : Any, T5 : Any, R : Any> combineEager(replica1: Replica<T1>, replica2: Replica<T2>, replica3: Replica<T3>, replica4: Replica<T4>, replica5: Replica<T5>, transform: (T1?, T2?, T3?, T4?, T5?) -> R): Replica<R>",
      "me.aartikov.replica.algebra.combineEager"
    ]
  },
  {
    "name": "class AndroidNetworkConnectivityProvider(application: Application, disconnectionDebounce: Duration = 500.milliseconds) : NetworkConnectivityProvider",
    "description": "me.aartikov.replica.network.AndroidNetworkConnectivityProvider",
    "location": "replica-android-network/me.aartikov.replica.network/-android-network-connectivity-provider/index.html",
    "searchKeys": [
      "AndroidNetworkConnectivityProvider",
      "class AndroidNetworkConnectivityProvider(application: Application, disconnectionDebounce: Duration = 500.milliseconds) : NetworkConnectivityProvider",
      "me.aartikov.replica.network.AndroidNetworkConnectivityProvider"
    ]
  },
  {
    "name": "fun AndroidNetworkConnectivityProvider(application: Application, disconnectionDebounce: Duration = 500.milliseconds)",
    "description": "me.aartikov.replica.network.AndroidNetworkConnectivityProvider.AndroidNetworkConnectivityProvider",
    "location": "replica-android-network/me.aartikov.replica.network/-android-network-connectivity-provider/-android-network-connectivity-provider.html",
    "searchKeys": [
      "AndroidNetworkConnectivityProvider",
      "fun AndroidNetworkConnectivityProvider(application: Application, disconnectionDebounce: Duration = 500.milliseconds)",
      "me.aartikov.replica.network.AndroidNetworkConnectivityProvider.AndroidNetworkConnectivityProvider"
    ]
  },
  {
    "name": "open override val connectedFlow: StateFlow<Boolean>",
    "description": "me.aartikov.replica.network.AndroidNetworkConnectivityProvider.connectedFlow",
    "location": "replica-android-network/me.aartikov.replica.network/-android-network-connectivity-provider/connected-flow.html",
    "searchKeys": [
      "connectedFlow",
      "open override val connectedFlow: StateFlow<Boolean>",
      "me.aartikov.replica.network.AndroidNetworkConnectivityProvider.connectedFlow"
    ]
  },
  {
    "name": "fun <T : Any, K : Any> KeyedReplica<K, T>.observe(lifecycle: Lifecycle, keyFlow: StateFlow<K?>): ReplicaObserver<T>",
    "description": "me.aartikov.replica.decompose.observe",
    "location": "replica-decompose/me.aartikov.replica.decompose/observe.html",
    "searchKeys": [
      "observe",
      "fun <T : Any, K : Any> KeyedReplica<K, T>.observe(lifecycle: Lifecycle, keyFlow: StateFlow<K?>): ReplicaObserver<T>",
      "me.aartikov.replica.decompose.observe"
    ]
  },
  {
    "name": "fun <T : Any> Replica<T>.observe(lifecycle: Lifecycle): ReplicaObserver<T>",
    "description": "me.aartikov.replica.decompose.observe",
    "location": "replica-decompose/me.aartikov.replica.decompose/observe.html",
    "searchKeys": [
      "observe",
      "fun <T : Any> Replica<T>.observe(lifecycle: Lifecycle): ReplicaObserver<T>",
      "me.aartikov.replica.decompose.observe"
    ]
  },
  {
    "name": "fun Lifecycle.activeFlow(): StateFlow<Boolean>",
    "description": "me.aartikov.replica.decompose.activeFlow",
    "location": "replica-decompose/me.aartikov.replica.decompose/active-flow.html",
    "searchKeys": [
      "activeFlow",
      "fun Lifecycle.activeFlow(): StateFlow<Boolean>",
      "me.aartikov.replica.decompose.activeFlow"
    ]
  },
  {
    "name": "fun Lifecycle.coroutineScope(): CoroutineScope",
    "description": "me.aartikov.replica.decompose.coroutineScope",
    "location": "replica-decompose/me.aartikov.replica.decompose/coroutine-scope.html",
    "searchKeys": [
      "coroutineScope",
      "fun Lifecycle.coroutineScope(): CoroutineScope",
      "me.aartikov.replica.decompose.coroutineScope"
    ]
  },
  {
    "name": "Active",
    "description": "me.aartikov.replica.common.ObservingStatus.Active",
    "location": "replica-core/me.aartikov.replica.common/-observing-status/-active/index.html",
    "searchKeys": [
      "Active",
      "Active",
      "me.aartikov.replica.common.ObservingStatus.Active"
    ]
  },
  {
    "name": "DontRefresh",
    "description": "me.aartikov.replica.common.InvalidationMode.DontRefresh",
    "location": "replica-core/me.aartikov.replica.common/-invalidation-mode/-dont-refresh/index.html",
    "searchKeys": [
      "DontRefresh",
      "DontRefresh",
      "me.aartikov.replica.common.InvalidationMode.DontRefresh"
    ]
  },
  {
    "name": "Inactive",
    "description": "me.aartikov.replica.common.ObservingStatus.Inactive",
    "location": "replica-core/me.aartikov.replica.common/-observing-status/-inactive/index.html",
    "searchKeys": [
      "Inactive",
      "Inactive",
      "me.aartikov.replica.common.ObservingStatus.Inactive"
    ]
  },
  {
    "name": "None",
    "description": "me.aartikov.replica.common.ObservingStatus.None",
    "location": "replica-core/me.aartikov.replica.common/-observing-status/-none/index.html",
    "searchKeys": [
      "None",
      "None",
      "me.aartikov.replica.common.ObservingStatus.None"
    ]
  },
  {
    "name": "RefreshAlways",
    "description": "me.aartikov.replica.common.InvalidationMode.RefreshAlways",
    "location": "replica-core/me.aartikov.replica.common/-invalidation-mode/-refresh-always/index.html",
    "searchKeys": [
      "RefreshAlways",
      "RefreshAlways",
      "me.aartikov.replica.common.InvalidationMode.RefreshAlways"
    ]
  },
  {
    "name": "RefreshIfHasActiveObservers",
    "description": "me.aartikov.replica.common.InvalidationMode.RefreshIfHasActiveObservers",
    "location": "replica-core/me.aartikov.replica.common/-invalidation-mode/-refresh-if-has-active-observers/index.html",
    "searchKeys": [
      "RefreshIfHasActiveObservers",
      "RefreshIfHasActiveObservers",
      "me.aartikov.replica.common.InvalidationMode.RefreshIfHasActiveObservers"
    ]
  },
  {
    "name": "RefreshIfHasObservers",
    "description": "me.aartikov.replica.common.InvalidationMode.RefreshIfHasObservers",
    "location": "replica-core/me.aartikov.replica.common/-invalidation-mode/-refresh-if-has-observers/index.html",
    "searchKeys": [
      "RefreshIfHasObservers",
      "RefreshIfHasObservers",
      "me.aartikov.replica.common.InvalidationMode.RefreshIfHasObservers"
    ]
  },
  {
    "name": "abstract fun <K : Any, T : Any> createKeyedReplica(name: String, childName: (K) -> String, settings: KeyedReplicaSettings<K, T> = KeyedReplicaSettings(), childSettings: (K) -> ReplicaSettings, tags: Set<ReplicaTag> = emptySet(), childTags: (K) -> Set<ReplicaTag> = { emptySet() }, behaviours: List<KeyedReplicaBehaviour<K, T>> = emptyList(), childBehaviours: (K) -> List<ReplicaBehaviour<T>> = { emptyList() }, storage: KeyedStorage<K, T>? = null, fetcher: KeyedFetcher<K, T>): KeyedPhysicalReplica<K, T>",
    "description": "me.aartikov.replica.client.ReplicaClient.createKeyedReplica",
    "location": "replica-core/me.aartikov.replica.client/-replica-client/create-keyed-replica.html",
    "searchKeys": [
      "createKeyedReplica",
      "abstract fun <K : Any, T : Any> createKeyedReplica(name: String, childName: (K) -> String, settings: KeyedReplicaSettings<K, T> = KeyedReplicaSettings(), childSettings: (K) -> ReplicaSettings, tags: Set<ReplicaTag> = emptySet(), childTags: (K) -> Set<ReplicaTag> = { emptySet() }, behaviours: List<KeyedReplicaBehaviour<K, T>> = emptyList(), childBehaviours: (K) -> List<ReplicaBehaviour<T>> = { emptyList() }, storage: KeyedStorage<K, T>? = null, fetcher: KeyedFetcher<K, T>): KeyedPhysicalReplica<K, T>",
      "me.aartikov.replica.client.ReplicaClient.createKeyedReplica"
    ]
  },
  {
    "name": "abstract fun <T : Any> createReplica(name: String, settings: ReplicaSettings, tags: Set<ReplicaTag> = emptySet(), behaviours: List<ReplicaBehaviour<T>> = emptyList(), storage: Storage<T>? = null, fetcher: Fetcher<T>): PhysicalReplica<T>",
    "description": "me.aartikov.replica.client.ReplicaClient.createReplica",
    "location": "replica-core/me.aartikov.replica.client/-replica-client/create-replica.html",
    "searchKeys": [
      "createReplica",
      "abstract fun <T : Any> createReplica(name: String, settings: ReplicaSettings, tags: Set<ReplicaTag> = emptySet(), behaviours: List<ReplicaBehaviour<T>> = emptyList(), storage: Storage<T>? = null, fetcher: Fetcher<T>): PhysicalReplica<T>",
      "me.aartikov.replica.client.ReplicaClient.createReplica"
    ]
  },
  {
    "name": "abstract fun apply(data: T): T",
    "description": "me.aartikov.replica.common.OptimisticUpdate.apply",
    "location": "replica-core/me.aartikov.replica.common/-optimistic-update/apply.html",
    "searchKeys": [
      "apply",
      "abstract fun apply(data: T): T",
      "me.aartikov.replica.common.OptimisticUpdate.apply"
    ]
  },
  {
    "name": "abstract fun cancel()",
    "description": "me.aartikov.replica.single.PhysicalReplica.cancel",
    "location": "replica-core/me.aartikov.replica.single/-physical-replica/cancel.html",
    "searchKeys": [
      "cancel",
      "abstract fun cancel()",
      "me.aartikov.replica.single.PhysicalReplica.cancel"
    ]
  },
  {
    "name": "abstract fun cancel(key: K)",
    "description": "me.aartikov.replica.keyed.KeyedPhysicalReplica.cancel",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-physical-replica/cancel.html",
    "searchKeys": [
      "cancel",
      "abstract fun cancel(key: K)",
      "me.aartikov.replica.keyed.KeyedPhysicalReplica.cancel"
    ]
  },
  {
    "name": "abstract fun cancelObserving()",
    "description": "me.aartikov.replica.single.ReplicaObserver.cancelObserving",
    "location": "replica-core/me.aartikov.replica.single/-replica-observer/cancel-observing.html",
    "searchKeys": [
      "cancelObserving",
      "abstract fun cancelObserving()",
      "me.aartikov.replica.single.ReplicaObserver.cancelObserving"
    ]
  },
  {
    "name": "abstract fun getCurrentState(key: K): ReplicaState<T>?",
    "description": "me.aartikov.replica.keyed.KeyedPhysicalReplica.getCurrentState",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-physical-replica/get-current-state.html",
    "searchKeys": [
      "getCurrentState",
      "abstract fun getCurrentState(key: K): ReplicaState<T>?",
      "me.aartikov.replica.keyed.KeyedPhysicalReplica.getCurrentState"
    ]
  },
  {
    "name": "abstract fun observe(observerCoroutineScope: CoroutineScope, observerActive: StateFlow<Boolean>): ReplicaObserver<T>",
    "description": "me.aartikov.replica.single.Replica.observe",
    "location": "replica-core/me.aartikov.replica.single/-replica/observe.html",
    "searchKeys": [
      "observe",
      "abstract fun observe(observerCoroutineScope: CoroutineScope, observerActive: StateFlow<Boolean>): ReplicaObserver<T>",
      "me.aartikov.replica.single.Replica.observe"
    ]
  },
  {
    "name": "abstract fun observe(observerCoroutineScope: CoroutineScope, observerActive: StateFlow<Boolean>, keyFlow: StateFlow<K?>): ReplicaObserver<T>",
    "description": "me.aartikov.replica.keyed.KeyedReplica.observe",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica/observe.html",
    "searchKeys": [
      "observe",
      "abstract fun observe(observerCoroutineScope: CoroutineScope, observerActive: StateFlow<Boolean>, keyFlow: StateFlow<K?>): ReplicaObserver<T>",
      "me.aartikov.replica.keyed.KeyedReplica.observe"
    ]
  },
  {
    "name": "abstract fun refresh()",
    "description": "me.aartikov.replica.single.Replica.refresh",
    "location": "replica-core/me.aartikov.replica.single/-replica/refresh.html",
    "searchKeys": [
      "refresh",
      "abstract fun refresh()",
      "me.aartikov.replica.single.Replica.refresh"
    ]
  },
  {
    "name": "abstract fun refresh(key: K)",
    "description": "me.aartikov.replica.keyed.KeyedReplica.refresh",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica/refresh.html",
    "searchKeys": [
      "refresh",
      "abstract fun refresh(key: K)",
      "me.aartikov.replica.keyed.KeyedReplica.refresh"
    ]
  },
  {
    "name": "abstract fun revalidate()",
    "description": "me.aartikov.replica.single.Replica.revalidate",
    "location": "replica-core/me.aartikov.replica.single/-replica/revalidate.html",
    "searchKeys": [
      "revalidate",
      "abstract fun revalidate()",
      "me.aartikov.replica.single.Replica.revalidate"
    ]
  },
  {
    "name": "abstract fun revalidate(key: K)",
    "description": "me.aartikov.replica.keyed.KeyedReplica.revalidate",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica/revalidate.html",
    "searchKeys": [
      "revalidate",
      "abstract fun revalidate(key: K)",
      "me.aartikov.replica.keyed.KeyedReplica.revalidate"
    ]
  },
  {
    "name": "abstract fun setup(keyedReplica: KeyedPhysicalReplica<K, T>)",
    "description": "me.aartikov.replica.keyed.behaviour.KeyedReplicaBehaviour.setup",
    "location": "replica-core/me.aartikov.replica.keyed.behaviour/-keyed-replica-behaviour/setup.html",
    "searchKeys": [
      "setup",
      "abstract fun setup(keyedReplica: KeyedPhysicalReplica<K, T>)",
      "me.aartikov.replica.keyed.behaviour.KeyedReplicaBehaviour.setup"
    ]
  },
  {
    "name": "abstract fun setup(replica: PhysicalReplica<T>)",
    "description": "me.aartikov.replica.single.behaviour.ReplicaBehaviour.setup",
    "location": "replica-core/me.aartikov.replica.single.behaviour/-replica-behaviour/setup.html",
    "searchKeys": [
      "setup",
      "abstract fun setup(replica: PhysicalReplica<T>)",
      "me.aartikov.replica.single.behaviour.ReplicaBehaviour.setup"
    ]
  },
  {
    "name": "abstract suspend fun beginOptimisticUpdate(key: K, update: OptimisticUpdate<T>)",
    "description": "me.aartikov.replica.keyed.KeyedPhysicalReplica.beginOptimisticUpdate",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-physical-replica/begin-optimistic-update.html",
    "searchKeys": [
      "beginOptimisticUpdate",
      "abstract suspend fun beginOptimisticUpdate(key: K, update: OptimisticUpdate<T>)",
      "me.aartikov.replica.keyed.KeyedPhysicalReplica.beginOptimisticUpdate"
    ]
  },
  {
    "name": "abstract suspend fun beginOptimisticUpdate(update: OptimisticUpdate<T>)",
    "description": "me.aartikov.replica.single.PhysicalReplica.beginOptimisticUpdate",
    "location": "replica-core/me.aartikov.replica.single/-physical-replica/begin-optimistic-update.html",
    "searchKeys": [
      "beginOptimisticUpdate",
      "abstract suspend fun beginOptimisticUpdate(update: OptimisticUpdate<T>)",
      "me.aartikov.replica.single.PhysicalReplica.beginOptimisticUpdate"
    ]
  },
  {
    "name": "abstract suspend fun clear(key: K, removeFromStorage: Boolean = true)",
    "description": "me.aartikov.replica.keyed.KeyedPhysicalReplica.clear",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-physical-replica/clear.html",
    "searchKeys": [
      "clear",
      "abstract suspend fun clear(key: K, removeFromStorage: Boolean = true)",
      "me.aartikov.replica.keyed.KeyedPhysicalReplica.clear"
    ]
  },
  {
    "name": "abstract suspend fun clear(removeFromStorage: Boolean = true)",
    "description": "me.aartikov.replica.single.PhysicalReplica.clear",
    "location": "replica-core/me.aartikov.replica.single/-physical-replica/clear.html",
    "searchKeys": [
      "clear",
      "abstract suspend fun clear(removeFromStorage: Boolean = true)",
      "me.aartikov.replica.single.PhysicalReplica.clear"
    ]
  },
  {
    "name": "abstract suspend fun clearAll()",
    "description": "me.aartikov.replica.keyed.KeyedPhysicalReplica.clearAll",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-physical-replica/clear-all.html",
    "searchKeys": [
      "clearAll",
      "abstract suspend fun clearAll()",
      "me.aartikov.replica.keyed.KeyedPhysicalReplica.clearAll"
    ]
  },
  {
    "name": "abstract suspend fun clearError()",
    "description": "me.aartikov.replica.single.PhysicalReplica.clearError",
    "location": "replica-core/me.aartikov.replica.single/-physical-replica/clear-error.html",
    "searchKeys": [
      "clearError",
      "abstract suspend fun clearError()",
      "me.aartikov.replica.single.PhysicalReplica.clearError"
    ]
  },
  {
    "name": "abstract suspend fun clearError(key: K)",
    "description": "me.aartikov.replica.keyed.KeyedPhysicalReplica.clearError",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-physical-replica/clear-error.html",
    "searchKeys": [
      "clearError",
      "abstract suspend fun clearError(key: K)",
      "me.aartikov.replica.keyed.KeyedPhysicalReplica.clearError"
    ]
  },
  {
    "name": "abstract suspend fun commitOptimisticUpdate(key: K, update: OptimisticUpdate<T>)",
    "description": "me.aartikov.replica.keyed.KeyedPhysicalReplica.commitOptimisticUpdate",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-physical-replica/commit-optimistic-update.html",
    "searchKeys": [
      "commitOptimisticUpdate",
      "abstract suspend fun commitOptimisticUpdate(key: K, update: OptimisticUpdate<T>)",
      "me.aartikov.replica.keyed.KeyedPhysicalReplica.commitOptimisticUpdate"
    ]
  },
  {
    "name": "abstract suspend fun commitOptimisticUpdate(update: OptimisticUpdate<T>)",
    "description": "me.aartikov.replica.single.PhysicalReplica.commitOptimisticUpdate",
    "location": "replica-core/me.aartikov.replica.single/-physical-replica/commit-optimistic-update.html",
    "searchKeys": [
      "commitOptimisticUpdate",
      "abstract suspend fun commitOptimisticUpdate(update: OptimisticUpdate<T>)",
      "me.aartikov.replica.single.PhysicalReplica.commitOptimisticUpdate"
    ]
  },
  {
    "name": "abstract suspend fun fetch(): T",
    "description": "me.aartikov.replica.single.Fetcher.fetch",
    "location": "replica-core/me.aartikov.replica.single/-fetcher/fetch.html",
    "searchKeys": [
      "fetch",
      "abstract suspend fun fetch(): T",
      "me.aartikov.replica.single.Fetcher.fetch"
    ]
  },
  {
    "name": "abstract suspend fun fetch(key: K): T",
    "description": "me.aartikov.replica.keyed.KeyedFetcher.fetch",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-fetcher/fetch.html",
    "searchKeys": [
      "fetch",
      "abstract suspend fun fetch(key: K): T",
      "me.aartikov.replica.keyed.KeyedFetcher.fetch"
    ]
  },
  {
    "name": "abstract suspend fun getData(forceRefresh: Boolean = false): T",
    "description": "me.aartikov.replica.single.Replica.getData",
    "location": "replica-core/me.aartikov.replica.single/-replica/get-data.html",
    "searchKeys": [
      "getData",
      "abstract suspend fun getData(forceRefresh: Boolean = false): T",
      "me.aartikov.replica.single.Replica.getData"
    ]
  },
  {
    "name": "abstract suspend fun getData(key: K, forceRefresh: Boolean = false): T",
    "description": "me.aartikov.replica.keyed.KeyedReplica.getData",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica/get-data.html",
    "searchKeys": [
      "getData",
      "abstract suspend fun getData(key: K, forceRefresh: Boolean = false): T",
      "me.aartikov.replica.keyed.KeyedReplica.getData"
    ]
  },
  {
    "name": "abstract suspend fun invalidate(key: K, mode: InvalidationMode = InvalidationMode.RefreshIfHasObservers)",
    "description": "me.aartikov.replica.keyed.KeyedPhysicalReplica.invalidate",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-physical-replica/invalidate.html",
    "searchKeys": [
      "invalidate",
      "abstract suspend fun invalidate(key: K, mode: InvalidationMode = InvalidationMode.RefreshIfHasObservers)",
      "me.aartikov.replica.keyed.KeyedPhysicalReplica.invalidate"
    ]
  },
  {
    "name": "abstract suspend fun invalidate(mode: InvalidationMode = InvalidationMode.RefreshIfHasObservers)",
    "description": "me.aartikov.replica.single.PhysicalReplica.invalidate",
    "location": "replica-core/me.aartikov.replica.single/-physical-replica/invalidate.html",
    "searchKeys": [
      "invalidate",
      "abstract suspend fun invalidate(mode: InvalidationMode = InvalidationMode.RefreshIfHasObservers)",
      "me.aartikov.replica.single.PhysicalReplica.invalidate"
    ]
  },
  {
    "name": "abstract suspend fun makeFresh()",
    "description": "me.aartikov.replica.single.PhysicalReplica.makeFresh",
    "location": "replica-core/me.aartikov.replica.single/-physical-replica/make-fresh.html",
    "searchKeys": [
      "makeFresh",
      "abstract suspend fun makeFresh()",
      "me.aartikov.replica.single.PhysicalReplica.makeFresh"
    ]
  },
  {
    "name": "abstract suspend fun makeFresh(key: K)",
    "description": "me.aartikov.replica.keyed.KeyedPhysicalReplica.makeFresh",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-physical-replica/make-fresh.html",
    "searchKeys": [
      "makeFresh",
      "abstract suspend fun makeFresh(key: K)",
      "me.aartikov.replica.keyed.KeyedPhysicalReplica.makeFresh"
    ]
  },
  {
    "name": "abstract suspend fun mutateData(key: K, transform: (T) -> T)",
    "description": "me.aartikov.replica.keyed.KeyedPhysicalReplica.mutateData",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-physical-replica/mutate-data.html",
    "searchKeys": [
      "mutateData",
      "abstract suspend fun mutateData(key: K, transform: (T) -> T)",
      "me.aartikov.replica.keyed.KeyedPhysicalReplica.mutateData"
    ]
  },
  {
    "name": "abstract suspend fun mutateData(transform: (T) -> T)",
    "description": "me.aartikov.replica.single.PhysicalReplica.mutateData",
    "location": "replica-core/me.aartikov.replica.single/-physical-replica/mutate-data.html",
    "searchKeys": [
      "mutateData",
      "abstract suspend fun mutateData(transform: (T) -> T)",
      "me.aartikov.replica.single.PhysicalReplica.mutateData"
    ]
  },
  {
    "name": "abstract suspend fun onEachKeyedReplica(action: suspend KeyedPhysicalReplica<*, *>.() -> Unit)",
    "description": "me.aartikov.replica.client.ReplicaClient.onEachKeyedReplica",
    "location": "replica-core/me.aartikov.replica.client/-replica-client/on-each-keyed-replica.html",
    "searchKeys": [
      "onEachKeyedReplica",
      "abstract suspend fun onEachKeyedReplica(action: suspend KeyedPhysicalReplica<*, *>.() -> Unit)",
      "me.aartikov.replica.client.ReplicaClient.onEachKeyedReplica"
    ]
  },
  {
    "name": "abstract suspend fun onEachReplica(action: suspend PhysicalReplica<T>.(K) -> Unit)",
    "description": "me.aartikov.replica.keyed.KeyedPhysicalReplica.onEachReplica",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-physical-replica/on-each-replica.html",
    "searchKeys": [
      "onEachReplica",
      "abstract suspend fun onEachReplica(action: suspend PhysicalReplica<T>.(K) -> Unit)",
      "me.aartikov.replica.keyed.KeyedPhysicalReplica.onEachReplica"
    ]
  },
  {
    "name": "abstract suspend fun onEachReplica(includeChildrenOfKeyedReplicas: Boolean = true, action: suspend PhysicalReplica<*>.() -> Unit)",
    "description": "me.aartikov.replica.client.ReplicaClient.onEachReplica",
    "location": "replica-core/me.aartikov.replica.client/-replica-client/on-each-replica.html",
    "searchKeys": [
      "onEachReplica",
      "abstract suspend fun onEachReplica(includeChildrenOfKeyedReplicas: Boolean = true, action: suspend PhysicalReplica<*>.() -> Unit)",
      "me.aartikov.replica.client.ReplicaClient.onEachReplica"
    ]
  },
  {
    "name": "abstract suspend fun onExistingReplica(key: K, action: suspend PhysicalReplica<T>.() -> Unit)",
    "description": "me.aartikov.replica.keyed.KeyedPhysicalReplica.onExistingReplica",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-physical-replica/on-existing-replica.html",
    "searchKeys": [
      "onExistingReplica",
      "abstract suspend fun onExistingReplica(key: K, action: suspend PhysicalReplica<T>.() -> Unit)",
      "me.aartikov.replica.keyed.KeyedPhysicalReplica.onExistingReplica"
    ]
  },
  {
    "name": "abstract suspend fun onReplica(key: K, action: suspend PhysicalReplica<T>.() -> Unit)",
    "description": "me.aartikov.replica.keyed.KeyedPhysicalReplica.onReplica",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-physical-replica/on-replica.html",
    "searchKeys": [
      "onReplica",
      "abstract suspend fun onReplica(key: K, action: suspend PhysicalReplica<T>.() -> Unit)",
      "me.aartikov.replica.keyed.KeyedPhysicalReplica.onReplica"
    ]
  },
  {
    "name": "abstract suspend fun read(): T?",
    "description": "me.aartikov.replica.single.Storage.read",
    "location": "replica-core/me.aartikov.replica.single/-storage/read.html",
    "searchKeys": [
      "read",
      "abstract suspend fun read(): T?",
      "me.aartikov.replica.single.Storage.read"
    ]
  },
  {
    "name": "abstract suspend fun read(key: K): T?",
    "description": "me.aartikov.replica.keyed.KeyedStorage.read",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-storage/read.html",
    "searchKeys": [
      "read",
      "abstract suspend fun read(key: K): T?",
      "me.aartikov.replica.keyed.KeyedStorage.read"
    ]
  },
  {
    "name": "abstract suspend fun remove()",
    "description": "me.aartikov.replica.single.Storage.remove",
    "location": "replica-core/me.aartikov.replica.single/-storage/remove.html",
    "searchKeys": [
      "remove",
      "abstract suspend fun remove()",
      "me.aartikov.replica.single.Storage.remove"
    ]
  },
  {
    "name": "abstract suspend fun remove(key: K)",
    "description": "me.aartikov.replica.keyed.KeyedStorage.remove",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-storage/remove.html",
    "searchKeys": [
      "remove",
      "abstract suspend fun remove(key: K)",
      "me.aartikov.replica.keyed.KeyedStorage.remove"
    ]
  },
  {
    "name": "abstract suspend fun removeAll()",
    "description": "me.aartikov.replica.keyed.KeyedStorage.removeAll",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-storage/remove-all.html",
    "searchKeys": [
      "removeAll",
      "abstract suspend fun removeAll()",
      "me.aartikov.replica.keyed.KeyedStorage.removeAll"
    ]
  },
  {
    "name": "abstract suspend fun rollbackOptimisticUpdate(key: K, update: OptimisticUpdate<T>)",
    "description": "me.aartikov.replica.keyed.KeyedPhysicalReplica.rollbackOptimisticUpdate",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-physical-replica/rollback-optimistic-update.html",
    "searchKeys": [
      "rollbackOptimisticUpdate",
      "abstract suspend fun rollbackOptimisticUpdate(key: K, update: OptimisticUpdate<T>)",
      "me.aartikov.replica.keyed.KeyedPhysicalReplica.rollbackOptimisticUpdate"
    ]
  },
  {
    "name": "abstract suspend fun rollbackOptimisticUpdate(update: OptimisticUpdate<T>)",
    "description": "me.aartikov.replica.single.PhysicalReplica.rollbackOptimisticUpdate",
    "location": "replica-core/me.aartikov.replica.single/-physical-replica/rollback-optimistic-update.html",
    "searchKeys": [
      "rollbackOptimisticUpdate",
      "abstract suspend fun rollbackOptimisticUpdate(update: OptimisticUpdate<T>)",
      "me.aartikov.replica.single.PhysicalReplica.rollbackOptimisticUpdate"
    ]
  },
  {
    "name": "abstract suspend fun setData(data: T)",
    "description": "me.aartikov.replica.single.PhysicalReplica.setData",
    "location": "replica-core/me.aartikov.replica.single/-physical-replica/set-data.html",
    "searchKeys": [
      "setData",
      "abstract suspend fun setData(data: T)",
      "me.aartikov.replica.single.PhysicalReplica.setData"
    ]
  },
  {
    "name": "abstract suspend fun setData(key: K, data: T)",
    "description": "me.aartikov.replica.keyed.KeyedPhysicalReplica.setData",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-physical-replica/set-data.html",
    "searchKeys": [
      "setData",
      "abstract suspend fun setData(key: K, data: T)",
      "me.aartikov.replica.keyed.KeyedPhysicalReplica.setData"
    ]
  },
  {
    "name": "abstract suspend fun write(data: T)",
    "description": "me.aartikov.replica.single.Storage.write",
    "location": "replica-core/me.aartikov.replica.single/-storage/write.html",
    "searchKeys": [
      "write",
      "abstract suspend fun write(data: T)",
      "me.aartikov.replica.single.Storage.write"
    ]
  },
  {
    "name": "abstract suspend fun write(key: K, data: T)",
    "description": "me.aartikov.replica.keyed.KeyedStorage.write",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-storage/write.html",
    "searchKeys": [
      "write",
      "abstract suspend fun write(key: K, data: T)",
      "me.aartikov.replica.keyed.KeyedStorage.write"
    ]
  },
  {
    "name": "abstract val connectedFlow: StateFlow<Boolean>",
    "description": "me.aartikov.replica.network.NetworkConnectivityProvider.connectedFlow",
    "location": "replica-core/me.aartikov.replica.network/-network-connectivity-provider/connected-flow.html",
    "searchKeys": [
      "connectedFlow",
      "abstract val connectedFlow: StateFlow<Boolean>",
      "me.aartikov.replica.network.NetworkConnectivityProvider.connectedFlow"
    ]
  },
  {
    "name": "abstract val coroutineScope: CoroutineScope",
    "description": "me.aartikov.replica.client.ReplicaClient.coroutineScope",
    "location": "replica-core/me.aartikov.replica.client/-replica-client/coroutine-scope.html",
    "searchKeys": [
      "coroutineScope",
      "abstract val coroutineScope: CoroutineScope",
      "me.aartikov.replica.client.ReplicaClient.coroutineScope"
    ]
  },
  {
    "name": "abstract val coroutineScope: CoroutineScope",
    "description": "me.aartikov.replica.keyed.KeyedPhysicalReplica.coroutineScope",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-physical-replica/coroutine-scope.html",
    "searchKeys": [
      "coroutineScope",
      "abstract val coroutineScope: CoroutineScope",
      "me.aartikov.replica.keyed.KeyedPhysicalReplica.coroutineScope"
    ]
  },
  {
    "name": "abstract val coroutineScope: CoroutineScope",
    "description": "me.aartikov.replica.single.PhysicalReplica.coroutineScope",
    "location": "replica-core/me.aartikov.replica.single/-physical-replica/coroutine-scope.html",
    "searchKeys": [
      "coroutineScope",
      "abstract val coroutineScope: CoroutineScope",
      "me.aartikov.replica.single.PhysicalReplica.coroutineScope"
    ]
  },
  {
    "name": "abstract val currentTime: Instant",
    "description": "me.aartikov.replica.time.TimeProvider.currentTime",
    "location": "replica-core/me.aartikov.replica.time/-time-provider/current-time.html",
    "searchKeys": [
      "currentTime",
      "abstract val currentTime: Instant",
      "me.aartikov.replica.time.TimeProvider.currentTime"
    ]
  },
  {
    "name": "abstract val eventFlow: Flow<KeyedReplicaEvent<K, T>>",
    "description": "me.aartikov.replica.keyed.KeyedPhysicalReplica.eventFlow",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-physical-replica/event-flow.html",
    "searchKeys": [
      "eventFlow",
      "abstract val eventFlow: Flow<KeyedReplicaEvent<K, T>>",
      "me.aartikov.replica.keyed.KeyedPhysicalReplica.eventFlow"
    ]
  },
  {
    "name": "abstract val eventFlow: Flow<ReplicaClientEvent>",
    "description": "me.aartikov.replica.client.ReplicaClient.eventFlow",
    "location": "replica-core/me.aartikov.replica.client/-replica-client/event-flow.html",
    "searchKeys": [
      "eventFlow",
      "abstract val eventFlow: Flow<ReplicaClientEvent>",
      "me.aartikov.replica.client.ReplicaClient.eventFlow"
    ]
  },
  {
    "name": "abstract val eventFlow: Flow<ReplicaEvent<T>>",
    "description": "me.aartikov.replica.single.PhysicalReplica.eventFlow",
    "location": "replica-core/me.aartikov.replica.single/-physical-replica/event-flow.html",
    "searchKeys": [
      "eventFlow",
      "abstract val eventFlow: Flow<ReplicaEvent<T>>",
      "me.aartikov.replica.single.PhysicalReplica.eventFlow"
    ]
  },
  {
    "name": "abstract val id: ReplicaId",
    "description": "me.aartikov.replica.keyed.KeyedPhysicalReplica.id",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-physical-replica/id.html",
    "searchKeys": [
      "id",
      "abstract val id: ReplicaId",
      "me.aartikov.replica.keyed.KeyedPhysicalReplica.id"
    ]
  },
  {
    "name": "abstract val id: ReplicaId",
    "description": "me.aartikov.replica.single.PhysicalReplica.id",
    "location": "replica-core/me.aartikov.replica.single/-physical-replica/id.html",
    "searchKeys": [
      "id",
      "abstract val id: ReplicaId",
      "me.aartikov.replica.single.PhysicalReplica.id"
    ]
  },
  {
    "name": "abstract val loadingErrorFlow: Flow<LoadingError>",
    "description": "me.aartikov.replica.single.ReplicaObserver.loadingErrorFlow",
    "location": "replica-core/me.aartikov.replica.single/-replica-observer/loading-error-flow.html",
    "searchKeys": [
      "loadingErrorFlow",
      "abstract val loadingErrorFlow: Flow<LoadingError>",
      "me.aartikov.replica.single.ReplicaObserver.loadingErrorFlow"
    ]
  },
  {
    "name": "abstract val name: String",
    "description": "me.aartikov.replica.keyed.KeyedPhysicalReplica.name",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-physical-replica/name.html",
    "searchKeys": [
      "name",
      "abstract val name: String",
      "me.aartikov.replica.keyed.KeyedPhysicalReplica.name"
    ]
  },
  {
    "name": "abstract val name: String",
    "description": "me.aartikov.replica.single.PhysicalReplica.name",
    "location": "replica-core/me.aartikov.replica.single/-physical-replica/name.html",
    "searchKeys": [
      "name",
      "abstract val name: String",
      "me.aartikov.replica.single.PhysicalReplica.name"
    ]
  },
  {
    "name": "abstract val networkConnectivityProvider: NetworkConnectivityProvider?",
    "description": "me.aartikov.replica.client.ReplicaClient.networkConnectivityProvider",
    "location": "replica-core/me.aartikov.replica.client/-replica-client/network-connectivity-provider.html",
    "searchKeys": [
      "networkConnectivityProvider",
      "abstract val networkConnectivityProvider: NetworkConnectivityProvider?",
      "me.aartikov.replica.client.ReplicaClient.networkConnectivityProvider"
    ]
  },
  {
    "name": "abstract val settings: KeyedReplicaSettings<K, T>",
    "description": "me.aartikov.replica.keyed.KeyedPhysicalReplica.settings",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-physical-replica/settings.html",
    "searchKeys": [
      "settings",
      "abstract val settings: KeyedReplicaSettings<K, T>",
      "me.aartikov.replica.keyed.KeyedPhysicalReplica.settings"
    ]
  },
  {
    "name": "abstract val settings: ReplicaSettings",
    "description": "me.aartikov.replica.single.PhysicalReplica.settings",
    "location": "replica-core/me.aartikov.replica.single/-physical-replica/settings.html",
    "searchKeys": [
      "settings",
      "abstract val settings: ReplicaSettings",
      "me.aartikov.replica.single.PhysicalReplica.settings"
    ]
  },
  {
    "name": "abstract val stateFlow: StateFlow<KeyedReplicaState>",
    "description": "me.aartikov.replica.keyed.KeyedPhysicalReplica.stateFlow",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-physical-replica/state-flow.html",
    "searchKeys": [
      "stateFlow",
      "abstract val stateFlow: StateFlow<KeyedReplicaState>",
      "me.aartikov.replica.keyed.KeyedPhysicalReplica.stateFlow"
    ]
  },
  {
    "name": "abstract val stateFlow: StateFlow<Loadable<T>>",
    "description": "me.aartikov.replica.single.ReplicaObserver.stateFlow",
    "location": "replica-core/me.aartikov.replica.single/-replica-observer/state-flow.html",
    "searchKeys": [
      "stateFlow",
      "abstract val stateFlow: StateFlow<Loadable<T>>",
      "me.aartikov.replica.single.ReplicaObserver.stateFlow"
    ]
  },
  {
    "name": "abstract val stateFlow: StateFlow<ReplicaState<T>>",
    "description": "me.aartikov.replica.single.PhysicalReplica.stateFlow",
    "location": "replica-core/me.aartikov.replica.single/-physical-replica/state-flow.html",
    "searchKeys": [
      "stateFlow",
      "abstract val stateFlow: StateFlow<ReplicaState<T>>",
      "me.aartikov.replica.single.PhysicalReplica.stateFlow"
    ]
  },
  {
    "name": "abstract val tags: Set<ReplicaTag>",
    "description": "me.aartikov.replica.keyed.KeyedPhysicalReplica.tags",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-physical-replica/tags.html",
    "searchKeys": [
      "tags",
      "abstract val tags: Set<ReplicaTag>",
      "me.aartikov.replica.keyed.KeyedPhysicalReplica.tags"
    ]
  },
  {
    "name": "abstract val tags: Set<ReplicaTag>",
    "description": "me.aartikov.replica.single.PhysicalReplica.tags",
    "location": "replica-core/me.aartikov.replica.single/-physical-replica/tags.html",
    "searchKeys": [
      "tags",
      "abstract val tags: Set<ReplicaTag>",
      "me.aartikov.replica.single.PhysicalReplica.tags"
    ]
  },
  {
    "name": "class DoOnCreated<T : Any>(action: suspend PhysicalReplica<T>.() -> Unit) : ReplicaBehaviour<T> ",
    "description": "me.aartikov.replica.single.behaviour.standard.DoOnCreated",
    "location": "replica-core/me.aartikov.replica.single.behaviour.standard/-do-on-created/index.html",
    "searchKeys": [
      "DoOnCreated",
      "class DoOnCreated<T : Any>(action: suspend PhysicalReplica<T>.() -> Unit) : ReplicaBehaviour<T> ",
      "me.aartikov.replica.single.behaviour.standard.DoOnCreated"
    ]
  },
  {
    "name": "class DoOnEvent<T : Any>(action: suspend PhysicalReplica<T>.(event: ReplicaEvent<T>) -> Unit) : ReplicaBehaviour<T> ",
    "description": "me.aartikov.replica.single.behaviour.standard.DoOnEvent",
    "location": "replica-core/me.aartikov.replica.single.behaviour.standard/-do-on-event/index.html",
    "searchKeys": [
      "DoOnEvent",
      "class DoOnEvent<T : Any>(action: suspend PhysicalReplica<T>.(event: ReplicaEvent<T>) -> Unit) : ReplicaBehaviour<T> ",
      "me.aartikov.replica.single.behaviour.standard.DoOnEvent"
    ]
  },
  {
    "name": "class DoOnNetworkConnectivityChanged<T : Any>(networkConnectivityProvider: NetworkConnectivityProvider, action: suspend PhysicalReplica<T>.(connected: Boolean) -> Unit) : ReplicaBehaviour<T> ",
    "description": "me.aartikov.replica.single.behaviour.standard.DoOnNetworkConnectivityChanged",
    "location": "replica-core/me.aartikov.replica.single.behaviour.standard/-do-on-network-connectivity-changed/index.html",
    "searchKeys": [
      "DoOnNetworkConnectivityChanged",
      "class DoOnNetworkConnectivityChanged<T : Any>(networkConnectivityProvider: NetworkConnectivityProvider, action: suspend PhysicalReplica<T>.(connected: Boolean) -> Unit) : ReplicaBehaviour<T> ",
      "me.aartikov.replica.single.behaviour.standard.DoOnNetworkConnectivityChanged"
    ]
  },
  {
    "name": "class DoOnStateCondition<T : Any>(condition: (ReplicaState<T>) -> Boolean, startDelay: Duration = Duration.ZERO, repeatInterval: Duration? = null, action: suspend PhysicalReplica<T>.() -> Unit) : ReplicaBehaviour<T> ",
    "description": "me.aartikov.replica.single.behaviour.standard.DoOnStateCondition",
    "location": "replica-core/me.aartikov.replica.single.behaviour.standard/-do-on-state-condition/index.html",
    "searchKeys": [
      "DoOnStateCondition",
      "class DoOnStateCondition<T : Any>(condition: (ReplicaState<T>) -> Boolean, startDelay: Duration = Duration.ZERO, repeatInterval: Duration? = null, action: suspend PhysicalReplica<T>.() -> Unit) : ReplicaBehaviour<T> ",
      "me.aartikov.replica.single.behaviour.standard.DoOnStateCondition"
    ]
  },
  {
    "name": "class KeyedDoOnEvent<K : Any, T : Any>(action: suspend KeyedPhysicalReplica<K, T>.(event: KeyedReplicaEvent<K, T>) -> Unit) : KeyedReplicaBehaviour<K, T> ",
    "description": "me.aartikov.replica.keyed.behaviour.standard.KeyedDoOnEvent",
    "location": "replica-core/me.aartikov.replica.keyed.behaviour.standard/-keyed-do-on-event/index.html",
    "searchKeys": [
      "KeyedDoOnEvent",
      "class KeyedDoOnEvent<K : Any, T : Any>(action: suspend KeyedPhysicalReplica<K, T>.(event: KeyedReplicaEvent<K, T>) -> Unit) : KeyedReplicaBehaviour<K, T> ",
      "me.aartikov.replica.keyed.behaviour.standard.KeyedDoOnEvent"
    ]
  },
  {
    "name": "class KeyedReplicaCreated(val keyedReplica: KeyedPhysicalReplica<*, *>) : ReplicaClientEvent",
    "description": "me.aartikov.replica.client.ReplicaClientEvent.KeyedReplicaCreated",
    "location": "replica-core/me.aartikov.replica.client/-replica-client-event/-keyed-replica-created/index.html",
    "searchKeys": [
      "KeyedReplicaCreated",
      "class KeyedReplicaCreated(val keyedReplica: KeyedPhysicalReplica<*, *>) : ReplicaClientEvent",
      "me.aartikov.replica.client.ReplicaClientEvent.KeyedReplicaCreated"
    ]
  },
  {
    "name": "class RealTimeProvider : TimeProvider",
    "description": "me.aartikov.replica.time.RealTimeProvider",
    "location": "replica-core/me.aartikov.replica.time/-real-time-provider/index.html",
    "searchKeys": [
      "RealTimeProvider",
      "class RealTimeProvider : TimeProvider",
      "me.aartikov.replica.time.RealTimeProvider"
    ]
  },
  {
    "name": "class ReplicaCreated(val replica: PhysicalReplica<*>) : ReplicaClientEvent",
    "description": "me.aartikov.replica.client.ReplicaClientEvent.ReplicaCreated",
    "location": "replica-core/me.aartikov.replica.client/-replica-client-event/-replica-created/index.html",
    "searchKeys": [
      "ReplicaCreated",
      "class ReplicaCreated(val replica: PhysicalReplica<*>) : ReplicaClientEvent",
      "me.aartikov.replica.client.ReplicaClientEvent.ReplicaCreated"
    ]
  },
  {
    "name": "class ReplicaCreated<K : Any, T : Any>(val key: K, val replica: PhysicalReplica<T>) : KeyedReplicaEvent<K, T> ",
    "description": "me.aartikov.replica.keyed.KeyedReplicaEvent.ReplicaCreated",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica-event/-replica-created/index.html",
    "searchKeys": [
      "ReplicaCreated",
      "class ReplicaCreated<K : Any, T : Any>(val key: K, val replica: PhysicalReplica<T>) : KeyedReplicaEvent<K, T> ",
      "me.aartikov.replica.keyed.KeyedReplicaEvent.ReplicaCreated"
    ]
  },
  {
    "name": "class ReplicaRemoved<K : Any, T : Any>(val key: K, val replicaId: ReplicaId) : KeyedReplicaEvent<K, T> ",
    "description": "me.aartikov.replica.keyed.KeyedReplicaEvent.ReplicaRemoved",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica-event/-replica-removed/index.html",
    "searchKeys": [
      "ReplicaRemoved",
      "class ReplicaRemoved<K : Any, T : Any>(val key: K, val replicaId: ReplicaId) : KeyedReplicaEvent<K, T> ",
      "me.aartikov.replica.keyed.KeyedReplicaEvent.ReplicaRemoved"
    ]
  },
  {
    "name": "data class ClearPolicy<K : Any, T : Any>(val clearOrder: ClearOrder<K, T> = ClearOrder.ByObservingTime, val isPrivilegedReplica: (Pair<K, ReplicaState<T>>) -> Boolean? = null)",
    "description": "me.aartikov.replica.keyed.ClearPolicy",
    "location": "replica-core/me.aartikov.replica.keyed/-clear-policy/index.html",
    "searchKeys": [
      "ClearPolicy",
      "data class ClearPolicy<K : Any, T : Any>(val clearOrder: ClearOrder<K, T> = ClearOrder.ByObservingTime, val isPrivilegedReplica: (Pair<K, ReplicaState<T>>) -> Boolean? = null)",
      "me.aartikov.replica.keyed.ClearPolicy"
    ]
  },
  {
    "name": "data class CombinedLoadingError(val exceptions: List<Exception>)",
    "description": "me.aartikov.replica.common.CombinedLoadingError",
    "location": "replica-core/me.aartikov.replica.common/-combined-loading-error/index.html",
    "searchKeys": [
      "CombinedLoadingError",
      "data class CombinedLoadingError(val exceptions: List<Exception>)",
      "me.aartikov.replica.common.CombinedLoadingError"
    ]
  },
  {
    "name": "data class CustomComparator<K : Any, T : Any>(val comparator: Comparator<Pair<K, ReplicaState<T>>>) : ClearOrder<K, T> ",
    "description": "me.aartikov.replica.keyed.ClearOrder.CustomComparator",
    "location": "replica-core/me.aartikov.replica.keyed/-clear-order/-custom-comparator/index.html",
    "searchKeys": [
      "CustomComparator",
      "data class CustomComparator<K : Any, T : Any>(val comparator: Comparator<Pair<K, ReplicaState<T>>>) : ClearOrder<K, T> ",
      "me.aartikov.replica.keyed.ClearOrder.CustomComparator"
    ]
  },
  {
    "name": "data class DataFromStorageLoaded<out T : Any>(val data: T) : ReplicaEvent.LoadingEvent<T> ",
    "description": "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.DataFromStorageLoaded",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/-loading-event/-data-from-storage-loaded/index.html",
    "searchKeys": [
      "DataFromStorageLoaded",
      "data class DataFromStorageLoaded<out T : Any>(val data: T) : ReplicaEvent.LoadingEvent<T> ",
      "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.DataFromStorageLoaded"
    ]
  },
  {
    "name": "data class Error(val exception: Exception) : ReplicaEvent.LoadingEvent.LoadingFinished<Nothing> ",
    "description": "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.LoadingFinished.Error",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/-loading-event/-loading-finished/-error/index.html",
    "searchKeys": [
      "Error",
      "data class Error(val exception: Exception) : ReplicaEvent.LoadingEvent.LoadingFinished<Nothing> ",
      "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.LoadingFinished.Error"
    ]
  },
  {
    "name": "data class KeyedReplicaSettings<K : Any, T : Any>(val maxCount: Int = Int.MAX_VALUE, val clearPolicy: ClearPolicy<K, T> = ClearPolicy())",
    "description": "me.aartikov.replica.keyed.KeyedReplicaSettings",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica-settings/index.html",
    "searchKeys": [
      "KeyedReplicaSettings",
      "data class KeyedReplicaSettings<K : Any, T : Any>(val maxCount: Int = Int.MAX_VALUE, val clearPolicy: ClearPolicy<K, T> = ClearPolicy())",
      "me.aartikov.replica.keyed.KeyedReplicaSettings"
    ]
  },
  {
    "name": "data class KeyedReplicaState(val replicaCount: Int, val replicaWithObserversCount: Int, val replicaWithActiveObserversCount: Int)",
    "description": "me.aartikov.replica.keyed.KeyedReplicaState",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica-state/index.html",
    "searchKeys": [
      "KeyedReplicaState",
      "data class KeyedReplicaState(val replicaCount: Int, val replicaWithObserversCount: Int, val replicaWithActiveObserversCount: Int)",
      "me.aartikov.replica.keyed.KeyedReplicaState"
    ]
  },
  {
    "name": "data class Loadable<out T : Any>(val loading: Boolean = false, val data: T? = null, val error: CombinedLoadingError? = null)",
    "description": "me.aartikov.replica.single.Loadable",
    "location": "replica-core/me.aartikov.replica.single/-loadable/index.html",
    "searchKeys": [
      "Loadable",
      "data class Loadable<out T : Any>(val loading: Boolean = false, val data: T? = null, val error: CombinedLoadingError? = null)",
      "me.aartikov.replica.single.Loadable"
    ]
  },
  {
    "name": "data class LoadingError(val exception: Exception)",
    "description": "me.aartikov.replica.common.LoadingError",
    "location": "replica-core/me.aartikov.replica.common/-loading-error/index.html",
    "searchKeys": [
      "LoadingError",
      "data class LoadingError(val exception: Exception)",
      "me.aartikov.replica.common.LoadingError"
    ]
  },
  {
    "name": "data class ObserverCountChangedEvent(val count: Int, val activeCount: Int, val previousCount: Int, val previousActiveCount: Int) : ReplicaEvent<Nothing> ",
    "description": "me.aartikov.replica.single.ReplicaEvent.ObserverCountChangedEvent",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/-observer-count-changed-event/index.html",
    "searchKeys": [
      "ObserverCountChangedEvent",
      "data class ObserverCountChangedEvent(val count: Int, val activeCount: Int, val previousCount: Int, val previousActiveCount: Int) : ReplicaEvent<Nothing> ",
      "me.aartikov.replica.single.ReplicaEvent.ObserverCountChangedEvent"
    ]
  },
  {
    "name": "data class ObservingState(val observerUuids: Set<String> = emptySet(), val activeObserverUuids: Set<String> = emptySet(), val observingTime: ObservingTime = ObservingTime.Never)",
    "description": "me.aartikov.replica.common.ObservingState",
    "location": "replica-core/me.aartikov.replica.common/-observing-state/index.html",
    "searchKeys": [
      "ObservingState",
      "data class ObservingState(val observerUuids: Set<String> = emptySet(), val activeObserverUuids: Set<String> = emptySet(), val observingTime: ObservingTime = ObservingTime.Never)",
      "me.aartikov.replica.common.ObservingState"
    ]
  },
  {
    "name": "data class ReplicaData<T : Any>(val value: T, val fresh: Boolean, val changingTime: Instant, val optimisticUpdates: List<OptimisticUpdate<T>> = emptyList())",
    "description": "me.aartikov.replica.single.ReplicaData",
    "location": "replica-core/me.aartikov.replica.single/-replica-data/index.html",
    "searchKeys": [
      "ReplicaData",
      "data class ReplicaData<T : Any>(val value: T, val fresh: Boolean, val changingTime: Instant, val optimisticUpdates: List<OptimisticUpdate<T>> = emptyList())",
      "me.aartikov.replica.single.ReplicaData"
    ]
  },
  {
    "name": "data class ReplicaSettings(val staleTime: Duration?, val clearTime: Duration? = null, val clearErrorTime: Duration? = 250.milliseconds, val cancelTime: Duration? = 250.milliseconds, val revalidateOnActiveObserverAdded: Boolean = true, val revalidateOnNetworkConnection: Boolean = true)",
    "description": "me.aartikov.replica.single.ReplicaSettings",
    "location": "replica-core/me.aartikov.replica.single/-replica-settings/index.html",
    "searchKeys": [
      "ReplicaSettings",
      "data class ReplicaSettings(val staleTime: Duration?, val clearTime: Duration? = null, val clearErrorTime: Duration? = 250.milliseconds, val cancelTime: Duration? = 250.milliseconds, val revalidateOnActiveObserverAdded: Boolean = true, val revalidateOnNetworkConnection: Boolean = true)",
      "me.aartikov.replica.single.ReplicaSettings"
    ]
  },
  {
    "name": "data class ReplicaState<T : Any>(val loading: Boolean, val data: ReplicaData<T>?, val error: LoadingError?, val observingState: ObservingState, val dataRequested: Boolean, val preloading: Boolean, val loadingFromStorageRequired: Boolean)",
    "description": "me.aartikov.replica.single.ReplicaState",
    "location": "replica-core/me.aartikov.replica.single/-replica-state/index.html",
    "searchKeys": [
      "ReplicaState",
      "data class ReplicaState<T : Any>(val loading: Boolean, val data: ReplicaData<T>?, val error: LoadingError?, val observingState: ObservingState, val dataRequested: Boolean, val preloading: Boolean, val loadingFromStorageRequired: Boolean)",
      "me.aartikov.replica.single.ReplicaState"
    ]
  },
  {
    "name": "data class Success<out T : Any>(val data: T) : ReplicaEvent.LoadingEvent.LoadingFinished<T> ",
    "description": "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.LoadingFinished.Success",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/-loading-event/-loading-finished/-success/index.html",
    "searchKeys": [
      "Success",
      "data class Success<out T : Any>(val data: T) : ReplicaEvent.LoadingEvent.LoadingFinished<T> ",
      "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.LoadingFinished.Success"
    ]
  },
  {
    "name": "data class TimeInPast(val time: Instant) : ObservingTime",
    "description": "me.aartikov.replica.common.ObservingTime.TimeInPast",
    "location": "replica-core/me.aartikov.replica.common/-observing-time/-time-in-past/index.html",
    "searchKeys": [
      "TimeInPast",
      "data class TimeInPast(val time: Instant) : ObservingTime",
      "me.aartikov.replica.common.ObservingTime.TimeInPast"
    ]
  },
  {
    "name": "enum InvalidationMode : Enum<InvalidationMode> ",
    "description": "me.aartikov.replica.common.InvalidationMode",
    "location": "replica-core/me.aartikov.replica.common/-invalidation-mode/index.html",
    "searchKeys": [
      "InvalidationMode",
      "enum InvalidationMode : Enum<InvalidationMode> ",
      "me.aartikov.replica.common.InvalidationMode"
    ]
  },
  {
    "name": "enum ObservingStatus : Enum<ObservingStatus> ",
    "description": "me.aartikov.replica.common.ObservingStatus",
    "location": "replica-core/me.aartikov.replica.common/-observing-status/index.html",
    "searchKeys": [
      "ObservingStatus",
      "enum ObservingStatus : Enum<ObservingStatus> ",
      "me.aartikov.replica.common.ObservingStatus"
    ]
  },
  {
    "name": "fun <K : Any, T : Any> ClearPolicy(clearOrder: ClearOrder<K, T> = ClearOrder.ByObservingTime, isPrivilegedReplica: (Pair<K, ReplicaState<T>>) -> Boolean? = null)",
    "description": "me.aartikov.replica.keyed.ClearPolicy.ClearPolicy",
    "location": "replica-core/me.aartikov.replica.keyed/-clear-policy/-clear-policy.html",
    "searchKeys": [
      "ClearPolicy",
      "fun <K : Any, T : Any> ClearPolicy(clearOrder: ClearOrder<K, T> = ClearOrder.ByObservingTime, isPrivilegedReplica: (Pair<K, ReplicaState<T>>) -> Boolean? = null)",
      "me.aartikov.replica.keyed.ClearPolicy.ClearPolicy"
    ]
  },
  {
    "name": "fun <K : Any, T : Any> KeyedDoOnEvent(action: suspend KeyedPhysicalReplica<K, T>.(event: KeyedReplicaEvent<K, T>) -> Unit)",
    "description": "me.aartikov.replica.keyed.behaviour.standard.KeyedDoOnEvent.KeyedDoOnEvent",
    "location": "replica-core/me.aartikov.replica.keyed.behaviour.standard/-keyed-do-on-event/-keyed-do-on-event.html",
    "searchKeys": [
      "KeyedDoOnEvent",
      "fun <K : Any, T : Any> KeyedDoOnEvent(action: suspend KeyedPhysicalReplica<K, T>.(event: KeyedReplicaEvent<K, T>) -> Unit)",
      "me.aartikov.replica.keyed.behaviour.standard.KeyedDoOnEvent.KeyedDoOnEvent"
    ]
  },
  {
    "name": "fun <K : Any, T : Any> KeyedReplica<K, T>.keepPreviousData(): KeyedReplica<K, T>",
    "description": "me.aartikov.replica.keyed.keepPreviousData",
    "location": "replica-core/me.aartikov.replica.keyed/keep-previous-data.html",
    "searchKeys": [
      "keepPreviousData",
      "fun <K : Any, T : Any> KeyedReplica<K, T>.keepPreviousData(): KeyedReplica<K, T>",
      "me.aartikov.replica.keyed.keepPreviousData"
    ]
  },
  {
    "name": "fun <K : Any, T : Any> KeyedReplicaSettings(maxCount: Int = Int.MAX_VALUE, clearPolicy: ClearPolicy<K, T> = ClearPolicy())",
    "description": "me.aartikov.replica.keyed.KeyedReplicaSettings.KeyedReplicaSettings",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica-settings/-keyed-replica-settings.html",
    "searchKeys": [
      "KeyedReplicaSettings",
      "fun <K : Any, T : Any> KeyedReplicaSettings(maxCount: Int = Int.MAX_VALUE, clearPolicy: ClearPolicy<K, T> = ClearPolicy())",
      "me.aartikov.replica.keyed.KeyedReplicaSettings.KeyedReplicaSettings"
    ]
  },
  {
    "name": "fun <K : Any, T : Any> ReplicaCreated(key: K, replica: PhysicalReplica<T>)",
    "description": "me.aartikov.replica.keyed.KeyedReplicaEvent.ReplicaCreated.ReplicaCreated",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica-event/-replica-created/-replica-created.html",
    "searchKeys": [
      "ReplicaCreated",
      "fun <K : Any, T : Any> ReplicaCreated(key: K, replica: PhysicalReplica<T>)",
      "me.aartikov.replica.keyed.KeyedReplicaEvent.ReplicaCreated.ReplicaCreated"
    ]
  },
  {
    "name": "fun <K : Any> ReplicaRemoved(key: K, replicaId: ReplicaId)",
    "description": "me.aartikov.replica.keyed.KeyedReplicaEvent.ReplicaRemoved.ReplicaRemoved",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica-event/-replica-removed/-replica-removed.html",
    "searchKeys": [
      "ReplicaRemoved",
      "fun <K : Any> ReplicaRemoved(key: K, replicaId: ReplicaId)",
      "me.aartikov.replica.keyed.KeyedReplicaEvent.ReplicaRemoved.ReplicaRemoved"
    ]
  },
  {
    "name": "fun <T : Any, R : Any> Loadable<T>.mapData(transform: (T) -> R): Loadable<R>",
    "description": "me.aartikov.replica.single.mapData",
    "location": "replica-core/me.aartikov.replica.single/map-data.html",
    "searchKeys": [
      "mapData",
      "fun <T : Any, R : Any> Loadable<T>.mapData(transform: (T) -> R): Loadable<R>",
      "me.aartikov.replica.single.mapData"
    ]
  },
  {
    "name": "fun <T : Any> DoOnCreated(action: suspend PhysicalReplica<T>.() -> Unit)",
    "description": "me.aartikov.replica.single.behaviour.standard.DoOnCreated.DoOnCreated",
    "location": "replica-core/me.aartikov.replica.single.behaviour.standard/-do-on-created/-do-on-created.html",
    "searchKeys": [
      "DoOnCreated",
      "fun <T : Any> DoOnCreated(action: suspend PhysicalReplica<T>.() -> Unit)",
      "me.aartikov.replica.single.behaviour.standard.DoOnCreated.DoOnCreated"
    ]
  },
  {
    "name": "fun <T : Any> DoOnEvent(action: suspend PhysicalReplica<T>.(event: ReplicaEvent<T>) -> Unit)",
    "description": "me.aartikov.replica.single.behaviour.standard.DoOnEvent.DoOnEvent",
    "location": "replica-core/me.aartikov.replica.single.behaviour.standard/-do-on-event/-do-on-event.html",
    "searchKeys": [
      "DoOnEvent",
      "fun <T : Any> DoOnEvent(action: suspend PhysicalReplica<T>.(event: ReplicaEvent<T>) -> Unit)",
      "me.aartikov.replica.single.behaviour.standard.DoOnEvent.DoOnEvent"
    ]
  },
  {
    "name": "fun <T : Any> DoOnNetworkConnectivityChanged(networkConnectivityProvider: NetworkConnectivityProvider, action: suspend PhysicalReplica<T>.(connected: Boolean) -> Unit)",
    "description": "me.aartikov.replica.single.behaviour.standard.DoOnNetworkConnectivityChanged.DoOnNetworkConnectivityChanged",
    "location": "replica-core/me.aartikov.replica.single.behaviour.standard/-do-on-network-connectivity-changed/-do-on-network-connectivity-changed.html",
    "searchKeys": [
      "DoOnNetworkConnectivityChanged",
      "fun <T : Any> DoOnNetworkConnectivityChanged(networkConnectivityProvider: NetworkConnectivityProvider, action: suspend PhysicalReplica<T>.(connected: Boolean) -> Unit)",
      "me.aartikov.replica.single.behaviour.standard.DoOnNetworkConnectivityChanged.DoOnNetworkConnectivityChanged"
    ]
  },
  {
    "name": "fun <T : Any> DoOnStateCondition(condition: (ReplicaState<T>) -> Boolean, startDelay: Duration = Duration.ZERO, repeatInterval: Duration? = null, action: suspend PhysicalReplica<T>.() -> Unit)",
    "description": "me.aartikov.replica.single.behaviour.standard.DoOnStateCondition.DoOnStateCondition",
    "location": "replica-core/me.aartikov.replica.single.behaviour.standard/-do-on-state-condition/-do-on-state-condition.html",
    "searchKeys": [
      "DoOnStateCondition",
      "fun <T : Any> DoOnStateCondition(condition: (ReplicaState<T>) -> Boolean, startDelay: Duration = Duration.ZERO, repeatInterval: Duration? = null, action: suspend PhysicalReplica<T>.() -> Unit)",
      "me.aartikov.replica.single.behaviour.standard.DoOnStateCondition.DoOnStateCondition"
    ]
  },
  {
    "name": "fun <T : Any> List<OptimisticUpdate<T>>.applyAll(data: T): T",
    "description": "me.aartikov.replica.common.applyAll",
    "location": "replica-core/me.aartikov.replica.common/apply-all.html",
    "searchKeys": [
      "applyAll",
      "fun <T : Any> List<OptimisticUpdate<T>>.applyAll(data: T): T",
      "me.aartikov.replica.common.applyAll"
    ]
  },
  {
    "name": "fun <T : Any> ReplicaData(value: T, fresh: Boolean, changingTime: Instant, optimisticUpdates: List<OptimisticUpdate<T>> = emptyList())",
    "description": "me.aartikov.replica.single.ReplicaData.ReplicaData",
    "location": "replica-core/me.aartikov.replica.single/-replica-data/-replica-data.html",
    "searchKeys": [
      "ReplicaData",
      "fun <T : Any> ReplicaData(value: T, fresh: Boolean, changingTime: Instant, optimisticUpdates: List<OptimisticUpdate<T>> = emptyList())",
      "me.aartikov.replica.single.ReplicaData.ReplicaData"
    ]
  },
  {
    "name": "fun <T : Any> ReplicaState(loading: Boolean, data: ReplicaData<T>?, error: LoadingError?, observingState: ObservingState, dataRequested: Boolean, preloading: Boolean, loadingFromStorageRequired: Boolean)",
    "description": "me.aartikov.replica.single.ReplicaState.ReplicaState",
    "location": "replica-core/me.aartikov.replica.single/-replica-state/-replica-state.html",
    "searchKeys": [
      "ReplicaState",
      "fun <T : Any> ReplicaState(loading: Boolean, data: ReplicaData<T>?, error: LoadingError?, observingState: ObservingState, dataRequested: Boolean, preloading: Boolean, loadingFromStorageRequired: Boolean)",
      "me.aartikov.replica.single.ReplicaState.ReplicaState"
    ]
  },
  {
    "name": "fun <T : Any> createEmpty(hasStorage: Boolean): ReplicaState<T>",
    "description": "me.aartikov.replica.single.ReplicaState.Companion.createEmpty",
    "location": "replica-core/me.aartikov.replica.single/-replica-state/-companion/create-empty.html",
    "searchKeys": [
      "createEmpty",
      "fun <T : Any> createEmpty(hasStorage: Boolean): ReplicaState<T>",
      "me.aartikov.replica.single.ReplicaState.Companion.createEmpty"
    ]
  },
  {
    "name": "fun <out T : Any> DataFromStorageLoaded(data: T)",
    "description": "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.DataFromStorageLoaded.DataFromStorageLoaded",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/-loading-event/-data-from-storage-loaded/-data-from-storage-loaded.html",
    "searchKeys": [
      "DataFromStorageLoaded",
      "fun <out T : Any> DataFromStorageLoaded(data: T)",
      "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.DataFromStorageLoaded.DataFromStorageLoaded"
    ]
  },
  {
    "name": "fun <out T : Any> Loadable(loading: Boolean = false, data: T? = null, error: CombinedLoadingError? = null)",
    "description": "me.aartikov.replica.single.Loadable.Loadable",
    "location": "replica-core/me.aartikov.replica.single/-loadable/-loadable.html",
    "searchKeys": [
      "Loadable",
      "fun <out T : Any> Loadable(loading: Boolean = false, data: T? = null, error: CombinedLoadingError? = null)",
      "me.aartikov.replica.single.Loadable.Loadable"
    ]
  },
  {
    "name": "fun <out T : Any> Success(data: T)",
    "description": "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.LoadingFinished.Success.Success",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/-loading-event/-loading-finished/-success/-success.html",
    "searchKeys": [
      "Success",
      "fun <out T : Any> Success(data: T)",
      "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.LoadingFinished.Success.Success"
    ]
  },
  {
    "name": "fun CombinedLoadingError(exception: Exception)",
    "description": "me.aartikov.replica.common.CombinedLoadingError.CombinedLoadingError",
    "location": "replica-core/me.aartikov.replica.common/-combined-loading-error/-combined-loading-error.html",
    "searchKeys": [
      "CombinedLoadingError",
      "fun CombinedLoadingError(exception: Exception)",
      "me.aartikov.replica.common.CombinedLoadingError.CombinedLoadingError"
    ]
  },
  {
    "name": "fun CombinedLoadingError(exceptions: List<Exception>)",
    "description": "me.aartikov.replica.common.CombinedLoadingError.CombinedLoadingError",
    "location": "replica-core/me.aartikov.replica.common/-combined-loading-error/-combined-loading-error.html",
    "searchKeys": [
      "CombinedLoadingError",
      "fun CombinedLoadingError(exceptions: List<Exception>)",
      "me.aartikov.replica.common.CombinedLoadingError.CombinedLoadingError"
    ]
  },
  {
    "name": "fun CustomComparator(comparator: Comparator<Pair<K, ReplicaState<T>>>)",
    "description": "me.aartikov.replica.keyed.ClearOrder.CustomComparator.CustomComparator",
    "location": "replica-core/me.aartikov.replica.keyed/-clear-order/-custom-comparator/-custom-comparator.html",
    "searchKeys": [
      "CustomComparator",
      "fun CustomComparator(comparator: Comparator<Pair<K, ReplicaState<T>>>)",
      "me.aartikov.replica.keyed.ClearOrder.CustomComparator.CustomComparator"
    ]
  },
  {
    "name": "fun Error(exception: Exception)",
    "description": "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.LoadingFinished.Error.Error",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/-loading-event/-loading-finished/-error/-error.html",
    "searchKeys": [
      "Error",
      "fun Error(exception: Exception)",
      "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.LoadingFinished.Error.Error"
    ]
  },
  {
    "name": "fun KeyedReplicaCreated(keyedReplica: KeyedPhysicalReplica<*, *>)",
    "description": "me.aartikov.replica.client.ReplicaClientEvent.KeyedReplicaCreated.KeyedReplicaCreated",
    "location": "replica-core/me.aartikov.replica.client/-replica-client-event/-keyed-replica-created/-keyed-replica-created.html",
    "searchKeys": [
      "KeyedReplicaCreated",
      "fun KeyedReplicaCreated(keyedReplica: KeyedPhysicalReplica<*, *>)",
      "me.aartikov.replica.client.ReplicaClientEvent.KeyedReplicaCreated.KeyedReplicaCreated"
    ]
  },
  {
    "name": "fun KeyedReplicaState(replicaCount: Int, replicaWithObserversCount: Int, replicaWithActiveObserversCount: Int)",
    "description": "me.aartikov.replica.keyed.KeyedReplicaState.KeyedReplicaState",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica-state/-keyed-replica-state.html",
    "searchKeys": [
      "KeyedReplicaState",
      "fun KeyedReplicaState(replicaCount: Int, replicaWithObserversCount: Int, replicaWithActiveObserversCount: Int)",
      "me.aartikov.replica.keyed.KeyedReplicaState.KeyedReplicaState"
    ]
  },
  {
    "name": "fun LoadingError(exception: Exception)",
    "description": "me.aartikov.replica.common.LoadingError.LoadingError",
    "location": "replica-core/me.aartikov.replica.common/-loading-error/-loading-error.html",
    "searchKeys": [
      "LoadingError",
      "fun LoadingError(exception: Exception)",
      "me.aartikov.replica.common.LoadingError.LoadingError"
    ]
  },
  {
    "name": "fun ObserverCountChangedEvent(count: Int, activeCount: Int, previousCount: Int, previousActiveCount: Int)",
    "description": "me.aartikov.replica.single.ReplicaEvent.ObserverCountChangedEvent.ObserverCountChangedEvent",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/-observer-count-changed-event/-observer-count-changed-event.html",
    "searchKeys": [
      "ObserverCountChangedEvent",
      "fun ObserverCountChangedEvent(count: Int, activeCount: Int, previousCount: Int, previousActiveCount: Int)",
      "me.aartikov.replica.single.ReplicaEvent.ObserverCountChangedEvent.ObserverCountChangedEvent"
    ]
  },
  {
    "name": "fun ObservingState(observerUuids: Set<String> = emptySet(), activeObserverUuids: Set<String> = emptySet(), observingTime: ObservingTime = ObservingTime.Never)",
    "description": "me.aartikov.replica.common.ObservingState.ObservingState",
    "location": "replica-core/me.aartikov.replica.common/-observing-state/-observing-state.html",
    "searchKeys": [
      "ObservingState",
      "fun ObservingState(observerUuids: Set<String> = emptySet(), activeObserverUuids: Set<String> = emptySet(), observingTime: ObservingTime = ObservingTime.Never)",
      "me.aartikov.replica.common.ObservingState.ObservingState"
    ]
  },
  {
    "name": "fun RealTimeProvider()",
    "description": "me.aartikov.replica.time.RealTimeProvider.RealTimeProvider",
    "location": "replica-core/me.aartikov.replica.time/-real-time-provider/-real-time-provider.html",
    "searchKeys": [
      "RealTimeProvider",
      "fun RealTimeProvider()",
      "me.aartikov.replica.time.RealTimeProvider.RealTimeProvider"
    ]
  },
  {
    "name": "fun ReplicaClient(networkConnectivityProvider: NetworkConnectivityProvider? = null, timeProvider: TimeProvider = RealTimeProvider(), coroutineScope: CoroutineScope = DefaultCoroutineScope): ReplicaClient",
    "description": "me.aartikov.replica.client.ReplicaClient",
    "location": "replica-core/me.aartikov.replica.client/-replica-client.html",
    "searchKeys": [
      "ReplicaClient",
      "fun ReplicaClient(networkConnectivityProvider: NetworkConnectivityProvider? = null, timeProvider: TimeProvider = RealTimeProvider(), coroutineScope: CoroutineScope = DefaultCoroutineScope): ReplicaClient",
      "me.aartikov.replica.client.ReplicaClient"
    ]
  },
  {
    "name": "fun ReplicaCreated(replica: PhysicalReplica<*>)",
    "description": "me.aartikov.replica.client.ReplicaClientEvent.ReplicaCreated.ReplicaCreated",
    "location": "replica-core/me.aartikov.replica.client/-replica-client-event/-replica-created/-replica-created.html",
    "searchKeys": [
      "ReplicaCreated",
      "fun ReplicaCreated(replica: PhysicalReplica<*>)",
      "me.aartikov.replica.client.ReplicaClientEvent.ReplicaCreated.ReplicaCreated"
    ]
  },
  {
    "name": "fun ReplicaId(value: String)",
    "description": "me.aartikov.replica.common.ReplicaId.ReplicaId",
    "location": "replica-core/me.aartikov.replica.common/-replica-id/-replica-id.html",
    "searchKeys": [
      "ReplicaId",
      "fun ReplicaId(value: String)",
      "me.aartikov.replica.common.ReplicaId.ReplicaId"
    ]
  },
  {
    "name": "fun ReplicaSettings(staleTime: Duration?, clearTime: Duration? = null, clearErrorTime: Duration? = 250.milliseconds, cancelTime: Duration? = 250.milliseconds, revalidateOnActiveObserverAdded: Boolean = true, revalidateOnNetworkConnection: Boolean = true)",
    "description": "me.aartikov.replica.single.ReplicaSettings.ReplicaSettings",
    "location": "replica-core/me.aartikov.replica.single/-replica-settings/-replica-settings.html",
    "searchKeys": [
      "ReplicaSettings",
      "fun ReplicaSettings(staleTime: Duration?, clearTime: Duration? = null, clearErrorTime: Duration? = 250.milliseconds, cancelTime: Duration? = 250.milliseconds, revalidateOnActiveObserverAdded: Boolean = true, revalidateOnNetworkConnection: Boolean = true)",
      "me.aartikov.replica.single.ReplicaSettings.ReplicaSettings"
    ]
  },
  {
    "name": "fun TimeInPast(time: Instant)",
    "description": "me.aartikov.replica.common.ObservingTime.TimeInPast.TimeInPast",
    "location": "replica-core/me.aartikov.replica.common/-observing-time/-time-in-past/-time-in-past.html",
    "searchKeys": [
      "TimeInPast",
      "fun TimeInPast(time: Instant)",
      "me.aartikov.replica.common.ObservingTime.TimeInPast.TimeInPast"
    ]
  },
  {
    "name": "fun interface Fetcher<T : Any>",
    "description": "me.aartikov.replica.single.Fetcher",
    "location": "replica-core/me.aartikov.replica.single/-fetcher/index.html",
    "searchKeys": [
      "Fetcher",
      "fun interface Fetcher<T : Any>",
      "me.aartikov.replica.single.Fetcher"
    ]
  },
  {
    "name": "fun interface KeyedFetcher<K : Any, T : Any>",
    "description": "me.aartikov.replica.keyed.KeyedFetcher",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-fetcher/index.html",
    "searchKeys": [
      "KeyedFetcher",
      "fun interface KeyedFetcher<K : Any, T : Any>",
      "me.aartikov.replica.keyed.KeyedFetcher"
    ]
  },
  {
    "name": "fun interface OptimisticUpdate<T : Any>",
    "description": "me.aartikov.replica.common.OptimisticUpdate",
    "location": "replica-core/me.aartikov.replica.common/-optimistic-update/index.html",
    "searchKeys": [
      "OptimisticUpdate",
      "fun interface OptimisticUpdate<T : Any>",
      "me.aartikov.replica.common.OptimisticUpdate"
    ]
  },
  {
    "name": "fun random(): ReplicaId",
    "description": "me.aartikov.replica.common.ReplicaId.Companion.random",
    "location": "replica-core/me.aartikov.replica.common/-replica-id/-companion/random.html",
    "searchKeys": [
      "random",
      "fun random(): ReplicaId",
      "me.aartikov.replica.common.ReplicaId.Companion.random"
    ]
  },
  {
    "name": "inline suspend fun <K : Any, T : Any, R> withOptimisticUpdate(update: OptimisticUpdate<T>, replica: KeyedPhysicalReplica<K, T>, key: K, noinline onSuccess: suspend () -> Unit? = null, noinline onError: suspend (Exception) -> Unit? = null, noinline onCanceled: suspend () -> Unit? = null, noinline onFinished: suspend () -> Unit? = null, block: () -> R): R",
    "description": "me.aartikov.replica.keyed.withOptimisticUpdate",
    "location": "replica-core/me.aartikov.replica.keyed/with-optimistic-update.html",
    "searchKeys": [
      "withOptimisticUpdate",
      "inline suspend fun <K : Any, T : Any, R> withOptimisticUpdate(update: OptimisticUpdate<T>, replica: KeyedPhysicalReplica<K, T>, key: K, noinline onSuccess: suspend () -> Unit? = null, noinline onError: suspend (Exception) -> Unit? = null, noinline onCanceled: suspend () -> Unit? = null, noinline onFinished: suspend () -> Unit? = null, block: () -> R): R",
      "me.aartikov.replica.keyed.withOptimisticUpdate"
    ]
  },
  {
    "name": "inline suspend fun <R> performOptimisticUpdate(begin: () -> Unit, commit: () -> Unit, crossinline rollback: suspend () -> Unit, noinline onSuccess: suspend () -> Unit? = null, noinline onError: suspend (Exception) -> Unit? = null, noinline onCanceled: suspend () -> Unit? = null, noinline onFinished: suspend () -> Unit? = null, block: () -> R): R",
    "description": "me.aartikov.replica.common.performOptimisticUpdate",
    "location": "replica-core/me.aartikov.replica.common/perform-optimistic-update.html",
    "searchKeys": [
      "performOptimisticUpdate",
      "inline suspend fun <R> performOptimisticUpdate(begin: () -> Unit, commit: () -> Unit, crossinline rollback: suspend () -> Unit, noinline onSuccess: suspend () -> Unit? = null, noinline onError: suspend (Exception) -> Unit? = null, noinline onCanceled: suspend () -> Unit? = null, noinline onFinished: suspend () -> Unit? = null, block: () -> R): R",
      "me.aartikov.replica.common.performOptimisticUpdate"
    ]
  },
  {
    "name": "inline suspend fun <T : Any, R> withOptimisticUpdate(update: OptimisticUpdate<T>, replica: PhysicalReplica<T>, noinline onSuccess: suspend () -> Unit? = null, noinline onError: suspend (Exception) -> Unit? = null, noinline onCanceled: suspend () -> Unit? = null, noinline onFinished: suspend () -> Unit? = null, block: () -> R): R",
    "description": "me.aartikov.replica.single.withOptimisticUpdate",
    "location": "replica-core/me.aartikov.replica.single/with-optimistic-update.html",
    "searchKeys": [
      "withOptimisticUpdate",
      "inline suspend fun <T : Any, R> withOptimisticUpdate(update: OptimisticUpdate<T>, replica: PhysicalReplica<T>, noinline onSuccess: suspend () -> Unit? = null, noinline onError: suspend (Exception) -> Unit? = null, noinline onCanceled: suspend () -> Unit? = null, noinline onFinished: suspend () -> Unit? = null, block: () -> R): R",
      "me.aartikov.replica.single.withOptimisticUpdate"
    ]
  },
  {
    "name": "interface ClearOrder<out K : Any, out T : Any>",
    "description": "me.aartikov.replica.keyed.ClearOrder",
    "location": "replica-core/me.aartikov.replica.keyed/-clear-order/index.html",
    "searchKeys": [
      "ClearOrder",
      "interface ClearOrder<out K : Any, out T : Any>",
      "me.aartikov.replica.keyed.ClearOrder"
    ]
  },
  {
    "name": "interface FreshnessEvent : ReplicaEvent<Nothing> ",
    "description": "me.aartikov.replica.single.ReplicaEvent.FreshnessEvent",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/-freshness-event/index.html",
    "searchKeys": [
      "FreshnessEvent",
      "interface FreshnessEvent : ReplicaEvent<Nothing> ",
      "me.aartikov.replica.single.ReplicaEvent.FreshnessEvent"
    ]
  },
  {
    "name": "interface KeyedPhysicalReplica<K : Any, T : Any> : KeyedReplica<K, T> ",
    "description": "me.aartikov.replica.keyed.KeyedPhysicalReplica",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-physical-replica/index.html",
    "searchKeys": [
      "KeyedPhysicalReplica",
      "interface KeyedPhysicalReplica<K : Any, T : Any> : KeyedReplica<K, T> ",
      "me.aartikov.replica.keyed.KeyedPhysicalReplica"
    ]
  },
  {
    "name": "interface KeyedReplica<K : Any, out T : Any>",
    "description": "me.aartikov.replica.keyed.KeyedReplica",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica/index.html",
    "searchKeys": [
      "KeyedReplica",
      "interface KeyedReplica<K : Any, out T : Any>",
      "me.aartikov.replica.keyed.KeyedReplica"
    ]
  },
  {
    "name": "interface KeyedReplicaBehaviour<K : Any, T : Any>",
    "description": "me.aartikov.replica.keyed.behaviour.KeyedReplicaBehaviour",
    "location": "replica-core/me.aartikov.replica.keyed.behaviour/-keyed-replica-behaviour/index.html",
    "searchKeys": [
      "KeyedReplicaBehaviour",
      "interface KeyedReplicaBehaviour<K : Any, T : Any>",
      "me.aartikov.replica.keyed.behaviour.KeyedReplicaBehaviour"
    ]
  },
  {
    "name": "interface KeyedReplicaEvent<K : Any, T : Any>",
    "description": "me.aartikov.replica.keyed.KeyedReplicaEvent",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica-event/index.html",
    "searchKeys": [
      "KeyedReplicaEvent",
      "interface KeyedReplicaEvent<K : Any, T : Any>",
      "me.aartikov.replica.keyed.KeyedReplicaEvent"
    ]
  },
  {
    "name": "interface KeyedStorage<K : Any, T : Any>",
    "description": "me.aartikov.replica.keyed.KeyedStorage",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-storage/index.html",
    "searchKeys": [
      "KeyedStorage",
      "interface KeyedStorage<K : Any, T : Any>",
      "me.aartikov.replica.keyed.KeyedStorage"
    ]
  },
  {
    "name": "interface LoadingEvent<out T : Any> : ReplicaEvent<T> ",
    "description": "me.aartikov.replica.single.ReplicaEvent.LoadingEvent",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/-loading-event/index.html",
    "searchKeys": [
      "LoadingEvent",
      "interface LoadingEvent<out T : Any> : ReplicaEvent<T> ",
      "me.aartikov.replica.single.ReplicaEvent.LoadingEvent"
    ]
  },
  {
    "name": "interface LoadingFinished<out T : Any> : ReplicaEvent.LoadingEvent<T> ",
    "description": "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.LoadingFinished",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/-loading-event/-loading-finished/index.html",
    "searchKeys": [
      "LoadingFinished",
      "interface LoadingFinished<out T : Any> : ReplicaEvent.LoadingEvent<T> ",
      "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.LoadingFinished"
    ]
  },
  {
    "name": "interface NetworkConnectivityProvider",
    "description": "me.aartikov.replica.network.NetworkConnectivityProvider",
    "location": "replica-core/me.aartikov.replica.network/-network-connectivity-provider/index.html",
    "searchKeys": [
      "NetworkConnectivityProvider",
      "interface NetworkConnectivityProvider",
      "me.aartikov.replica.network.NetworkConnectivityProvider"
    ]
  },
  {
    "name": "interface ObservingTime : Comparable<ObservingTime> ",
    "description": "me.aartikov.replica.common.ObservingTime",
    "location": "replica-core/me.aartikov.replica.common/-observing-time/index.html",
    "searchKeys": [
      "ObservingTime",
      "interface ObservingTime : Comparable<ObservingTime> ",
      "me.aartikov.replica.common.ObservingTime"
    ]
  },
  {
    "name": "interface PhysicalReplica<T : Any> : Replica<T> ",
    "description": "me.aartikov.replica.single.PhysicalReplica",
    "location": "replica-core/me.aartikov.replica.single/-physical-replica/index.html",
    "searchKeys": [
      "PhysicalReplica",
      "interface PhysicalReplica<T : Any> : Replica<T> ",
      "me.aartikov.replica.single.PhysicalReplica"
    ]
  },
  {
    "name": "interface Replica<out T : Any>",
    "description": "me.aartikov.replica.single.Replica",
    "location": "replica-core/me.aartikov.replica.single/-replica/index.html",
    "searchKeys": [
      "Replica",
      "interface Replica<out T : Any>",
      "me.aartikov.replica.single.Replica"
    ]
  },
  {
    "name": "interface ReplicaBehaviour<T : Any>",
    "description": "me.aartikov.replica.single.behaviour.ReplicaBehaviour",
    "location": "replica-core/me.aartikov.replica.single.behaviour/-replica-behaviour/index.html",
    "searchKeys": [
      "ReplicaBehaviour",
      "interface ReplicaBehaviour<T : Any>",
      "me.aartikov.replica.single.behaviour.ReplicaBehaviour"
    ]
  },
  {
    "name": "interface ReplicaClient",
    "description": "me.aartikov.replica.client.ReplicaClient",
    "location": "replica-core/me.aartikov.replica.client/-replica-client/index.html",
    "searchKeys": [
      "ReplicaClient",
      "interface ReplicaClient",
      "me.aartikov.replica.client.ReplicaClient"
    ]
  },
  {
    "name": "interface ReplicaClientEvent",
    "description": "me.aartikov.replica.client.ReplicaClientEvent",
    "location": "replica-core/me.aartikov.replica.client/-replica-client-event/index.html",
    "searchKeys": [
      "ReplicaClientEvent",
      "interface ReplicaClientEvent",
      "me.aartikov.replica.client.ReplicaClientEvent"
    ]
  },
  {
    "name": "interface ReplicaEvent<out T : Any>",
    "description": "me.aartikov.replica.single.ReplicaEvent",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/index.html",
    "searchKeys": [
      "ReplicaEvent",
      "interface ReplicaEvent<out T : Any>",
      "me.aartikov.replica.single.ReplicaEvent"
    ]
  },
  {
    "name": "interface ReplicaObserver<out T : Any>",
    "description": "me.aartikov.replica.single.ReplicaObserver",
    "location": "replica-core/me.aartikov.replica.single/-replica-observer/index.html",
    "searchKeys": [
      "ReplicaObserver",
      "interface ReplicaObserver<out T : Any>",
      "me.aartikov.replica.single.ReplicaObserver"
    ]
  },
  {
    "name": "interface ReplicaTag",
    "description": "me.aartikov.replica.common.ReplicaTag",
    "location": "replica-core/me.aartikov.replica.common/-replica-tag/index.html",
    "searchKeys": [
      "ReplicaTag",
      "interface ReplicaTag",
      "me.aartikov.replica.common.ReplicaTag"
    ]
  },
  {
    "name": "interface Storage<T : Any>",
    "description": "me.aartikov.replica.single.Storage",
    "location": "replica-core/me.aartikov.replica.single/-storage/index.html",
    "searchKeys": [
      "Storage",
      "interface Storage<T : Any>",
      "me.aartikov.replica.single.Storage"
    ]
  },
  {
    "name": "interface TimeProvider",
    "description": "me.aartikov.replica.time.TimeProvider",
    "location": "replica-core/me.aartikov.replica.time/-time-provider/index.html",
    "searchKeys": [
      "TimeProvider",
      "interface TimeProvider",
      "me.aartikov.replica.time.TimeProvider"
    ]
  },
  {
    "name": "object BecameStale : ReplicaEvent.FreshnessEvent",
    "description": "me.aartikov.replica.single.ReplicaEvent.FreshnessEvent.BecameStale",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/-freshness-event/-became-stale/index.html",
    "searchKeys": [
      "BecameStale",
      "object BecameStale : ReplicaEvent.FreshnessEvent",
      "me.aartikov.replica.single.ReplicaEvent.FreshnessEvent.BecameStale"
    ]
  },
  {
    "name": "object ByDataChangingTime : ClearOrder<Nothing, Nothing> ",
    "description": "me.aartikov.replica.keyed.ClearOrder.ByDataChangingTime",
    "location": "replica-core/me.aartikov.replica.keyed/-clear-order/-by-data-changing-time/index.html",
    "searchKeys": [
      "ByDataChangingTime",
      "object ByDataChangingTime : ClearOrder<Nothing, Nothing> ",
      "me.aartikov.replica.keyed.ClearOrder.ByDataChangingTime"
    ]
  },
  {
    "name": "object ByObservingTime : ClearOrder<Nothing, Nothing> ",
    "description": "me.aartikov.replica.keyed.ClearOrder.ByObservingTime",
    "location": "replica-core/me.aartikov.replica.keyed/-clear-order/-by-observing-time/index.html",
    "searchKeys": [
      "ByObservingTime",
      "object ByObservingTime : ClearOrder<Nothing, Nothing> ",
      "me.aartikov.replica.keyed.ClearOrder.ByObservingTime"
    ]
  },
  {
    "name": "object Canceled : ReplicaEvent.LoadingEvent.LoadingFinished<Nothing> ",
    "description": "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.LoadingFinished.Canceled",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/-loading-event/-loading-finished/-canceled/index.html",
    "searchKeys": [
      "Canceled",
      "object Canceled : ReplicaEvent.LoadingEvent.LoadingFinished<Nothing> ",
      "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.LoadingFinished.Canceled"
    ]
  },
  {
    "name": "object ClearedEvent : ReplicaEvent<Nothing> ",
    "description": "me.aartikov.replica.single.ReplicaEvent.ClearedEvent",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/-cleared-event/index.html",
    "searchKeys": [
      "ClearedEvent",
      "object ClearedEvent : ReplicaEvent<Nothing> ",
      "me.aartikov.replica.single.ReplicaEvent.ClearedEvent"
    ]
  },
  {
    "name": "object Companion",
    "description": "me.aartikov.replica.client.ReplicaClient.Companion",
    "location": "replica-core/me.aartikov.replica.client/-replica-client/-companion/index.html",
    "searchKeys": [
      "Companion",
      "object Companion",
      "me.aartikov.replica.client.ReplicaClient.Companion"
    ]
  },
  {
    "name": "object Companion",
    "description": "me.aartikov.replica.common.ReplicaId.Companion",
    "location": "replica-core/me.aartikov.replica.common/-replica-id/-companion/index.html",
    "searchKeys": [
      "Companion",
      "object Companion",
      "me.aartikov.replica.common.ReplicaId.Companion"
    ]
  },
  {
    "name": "object Companion",
    "description": "me.aartikov.replica.keyed.KeyedReplicaState.Companion",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica-state/-companion/index.html",
    "searchKeys": [
      "Companion",
      "object Companion",
      "me.aartikov.replica.keyed.KeyedReplicaState.Companion"
    ]
  },
  {
    "name": "object Companion",
    "description": "me.aartikov.replica.single.ReplicaSettings.Companion",
    "location": "replica-core/me.aartikov.replica.single/-replica-settings/-companion/index.html",
    "searchKeys": [
      "Companion",
      "object Companion",
      "me.aartikov.replica.single.ReplicaSettings.Companion"
    ]
  },
  {
    "name": "object Companion",
    "description": "me.aartikov.replica.single.ReplicaState.Companion",
    "location": "replica-core/me.aartikov.replica.single/-replica-state/-companion/index.html",
    "searchKeys": [
      "Companion",
      "object Companion",
      "me.aartikov.replica.single.ReplicaState.Companion"
    ]
  },
  {
    "name": "object Freshened : ReplicaEvent.FreshnessEvent",
    "description": "me.aartikov.replica.single.ReplicaEvent.FreshnessEvent.Freshened",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/-freshness-event/-freshened/index.html",
    "searchKeys": [
      "Freshened",
      "object Freshened : ReplicaEvent.FreshnessEvent",
      "me.aartikov.replica.single.ReplicaEvent.FreshnessEvent.Freshened"
    ]
  },
  {
    "name": "object LoadingStarted : ReplicaEvent.LoadingEvent<Nothing> ",
    "description": "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.LoadingStarted",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/-loading-event/-loading-started/index.html",
    "searchKeys": [
      "LoadingStarted",
      "object LoadingStarted : ReplicaEvent.LoadingEvent<Nothing> ",
      "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.LoadingStarted"
    ]
  },
  {
    "name": "object Never : ObservingTime",
    "description": "me.aartikov.replica.common.ObservingTime.Never",
    "location": "replica-core/me.aartikov.replica.common/-observing-time/-never/index.html",
    "searchKeys": [
      "Never",
      "object Never : ObservingTime",
      "me.aartikov.replica.common.ObservingTime.Never"
    ]
  },
  {
    "name": "object Now : ObservingTime",
    "description": "me.aartikov.replica.common.ObservingTime.Now",
    "location": "replica-core/me.aartikov.replica.common/-observing-time/-now/index.html",
    "searchKeys": [
      "Now",
      "object Now : ObservingTime",
      "me.aartikov.replica.common.ObservingTime.Now"
    ]
  },
  {
    "name": "open operator override fun compareTo(other: ObservingTime): Int",
    "description": "me.aartikov.replica.common.ObservingTime.Never.compareTo",
    "location": "replica-core/me.aartikov.replica.common/-observing-time/-never/compare-to.html",
    "searchKeys": [
      "compareTo",
      "open operator override fun compareTo(other: ObservingTime): Int",
      "me.aartikov.replica.common.ObservingTime.Never.compareTo"
    ]
  },
  {
    "name": "open operator override fun compareTo(other: ObservingTime): Int",
    "description": "me.aartikov.replica.common.ObservingTime.Now.compareTo",
    "location": "replica-core/me.aartikov.replica.common/-observing-time/-now/compare-to.html",
    "searchKeys": [
      "compareTo",
      "open operator override fun compareTo(other: ObservingTime): Int",
      "me.aartikov.replica.common.ObservingTime.Now.compareTo"
    ]
  },
  {
    "name": "open operator override fun compareTo(other: ObservingTime): Int",
    "description": "me.aartikov.replica.common.ObservingTime.TimeInPast.compareTo",
    "location": "replica-core/me.aartikov.replica.common/-observing-time/-time-in-past/compare-to.html",
    "searchKeys": [
      "compareTo",
      "open operator override fun compareTo(other: ObservingTime): Int",
      "me.aartikov.replica.common.ObservingTime.TimeInPast.compareTo"
    ]
  },
  {
    "name": "open override fun setup(keyedReplica: KeyedPhysicalReplica<K, T>)",
    "description": "me.aartikov.replica.keyed.behaviour.standard.KeyedDoOnEvent.setup",
    "location": "replica-core/me.aartikov.replica.keyed.behaviour.standard/-keyed-do-on-event/setup.html",
    "searchKeys": [
      "setup",
      "open override fun setup(keyedReplica: KeyedPhysicalReplica<K, T>)",
      "me.aartikov.replica.keyed.behaviour.standard.KeyedDoOnEvent.setup"
    ]
  },
  {
    "name": "open override fun setup(replica: PhysicalReplica<T>)",
    "description": "me.aartikov.replica.single.behaviour.standard.DoOnCreated.setup",
    "location": "replica-core/me.aartikov.replica.single.behaviour.standard/-do-on-created/setup.html",
    "searchKeys": [
      "setup",
      "open override fun setup(replica: PhysicalReplica<T>)",
      "me.aartikov.replica.single.behaviour.standard.DoOnCreated.setup"
    ]
  },
  {
    "name": "open override fun setup(replica: PhysicalReplica<T>)",
    "description": "me.aartikov.replica.single.behaviour.standard.DoOnEvent.setup",
    "location": "replica-core/me.aartikov.replica.single.behaviour.standard/-do-on-event/setup.html",
    "searchKeys": [
      "setup",
      "open override fun setup(replica: PhysicalReplica<T>)",
      "me.aartikov.replica.single.behaviour.standard.DoOnEvent.setup"
    ]
  },
  {
    "name": "open override fun setup(replica: PhysicalReplica<T>)",
    "description": "me.aartikov.replica.single.behaviour.standard.DoOnNetworkConnectivityChanged.setup",
    "location": "replica-core/me.aartikov.replica.single.behaviour.standard/-do-on-network-connectivity-changed/setup.html",
    "searchKeys": [
      "setup",
      "open override fun setup(replica: PhysicalReplica<T>)",
      "me.aartikov.replica.single.behaviour.standard.DoOnNetworkConnectivityChanged.setup"
    ]
  },
  {
    "name": "open override fun setup(replica: PhysicalReplica<T>)",
    "description": "me.aartikov.replica.single.behaviour.standard.DoOnStateCondition.setup",
    "location": "replica-core/me.aartikov.replica.single.behaviour.standard/-do-on-state-condition/setup.html",
    "searchKeys": [
      "setup",
      "open override fun setup(replica: PhysicalReplica<T>)",
      "me.aartikov.replica.single.behaviour.standard.DoOnStateCondition.setup"
    ]
  },
  {
    "name": "open override val currentTime: Instant",
    "description": "me.aartikov.replica.time.RealTimeProvider.currentTime",
    "location": "replica-core/me.aartikov.replica.time/-real-time-provider/current-time.html",
    "searchKeys": [
      "currentTime",
      "open override val currentTime: Instant",
      "me.aartikov.replica.time.RealTimeProvider.currentTime"
    ]
  },
  {
    "name": "suspend fun <K : Any, T : Any> KeyedPhysicalReplica<T, K>.cancelAll()",
    "description": "me.aartikov.replica.keyed.cancelAll",
    "location": "replica-core/me.aartikov.replica.keyed/cancel-all.html",
    "searchKeys": [
      "cancelAll",
      "suspend fun <K : Any, T : Any> KeyedPhysicalReplica<T, K>.cancelAll()",
      "me.aartikov.replica.keyed.cancelAll"
    ]
  },
  {
    "name": "suspend fun <K : Any, T : Any> KeyedPhysicalReplica<T, K>.cancelByTags(predicate: (Set<ReplicaTag>) -> Boolean)",
    "description": "me.aartikov.replica.keyed.cancelByTags",
    "location": "replica-core/me.aartikov.replica.keyed/cancel-by-tags.html",
    "searchKeys": [
      "cancelByTags",
      "suspend fun <K : Any, T : Any> KeyedPhysicalReplica<T, K>.cancelByTags(predicate: (Set<ReplicaTag>) -> Boolean)",
      "me.aartikov.replica.keyed.cancelByTags"
    ]
  },
  {
    "name": "suspend fun <K : Any, T : Any> KeyedPhysicalReplica<T, K>.clearByTags(predicate: (Set<ReplicaTag>) -> Boolean)",
    "description": "me.aartikov.replica.keyed.clearByTags",
    "location": "replica-core/me.aartikov.replica.keyed/clear-by-tags.html",
    "searchKeys": [
      "clearByTags",
      "suspend fun <K : Any, T : Any> KeyedPhysicalReplica<T, K>.clearByTags(predicate: (Set<ReplicaTag>) -> Boolean)",
      "me.aartikov.replica.keyed.clearByTags"
    ]
  },
  {
    "name": "suspend fun <K : Any, T : Any> KeyedPhysicalReplica<T, K>.invalidateAll(mode: InvalidationMode = InvalidationMode.RefreshIfHasObservers)",
    "description": "me.aartikov.replica.keyed.invalidateAll",
    "location": "replica-core/me.aartikov.replica.keyed/invalidate-all.html",
    "searchKeys": [
      "invalidateAll",
      "suspend fun <K : Any, T : Any> KeyedPhysicalReplica<T, K>.invalidateAll(mode: InvalidationMode = InvalidationMode.RefreshIfHasObservers)",
      "me.aartikov.replica.keyed.invalidateAll"
    ]
  },
  {
    "name": "suspend fun <K : Any, T : Any> KeyedPhysicalReplica<T, K>.invalidateByTags(mode: InvalidationMode = InvalidationMode.RefreshIfHasObservers, predicate: (Set<ReplicaTag>) -> Boolean)",
    "description": "me.aartikov.replica.keyed.invalidateByTags",
    "location": "replica-core/me.aartikov.replica.keyed/invalidate-by-tags.html",
    "searchKeys": [
      "invalidateByTags",
      "suspend fun <K : Any, T : Any> KeyedPhysicalReplica<T, K>.invalidateByTags(mode: InvalidationMode = InvalidationMode.RefreshIfHasObservers, predicate: (Set<ReplicaTag>) -> Boolean)",
      "me.aartikov.replica.keyed.invalidateByTags"
    ]
  },
  {
    "name": "suspend fun ReplicaClient.cancelAll()",
    "description": "me.aartikov.replica.client.cancelAll",
    "location": "replica-core/me.aartikov.replica.client/cancel-all.html",
    "searchKeys": [
      "cancelAll",
      "suspend fun ReplicaClient.cancelAll()",
      "me.aartikov.replica.client.cancelAll"
    ]
  },
  {
    "name": "suspend fun ReplicaClient.cancelByTags(predicate: (Set<ReplicaTag>) -> Boolean)",
    "description": "me.aartikov.replica.client.cancelByTags",
    "location": "replica-core/me.aartikov.replica.client/cancel-by-tags.html",
    "searchKeys": [
      "cancelByTags",
      "suspend fun ReplicaClient.cancelByTags(predicate: (Set<ReplicaTag>) -> Boolean)",
      "me.aartikov.replica.client.cancelByTags"
    ]
  },
  {
    "name": "suspend fun ReplicaClient.clearAll()",
    "description": "me.aartikov.replica.client.clearAll",
    "location": "replica-core/me.aartikov.replica.client/clear-all.html",
    "searchKeys": [
      "clearAll",
      "suspend fun ReplicaClient.clearAll()",
      "me.aartikov.replica.client.clearAll"
    ]
  },
  {
    "name": "suspend fun ReplicaClient.clearByTags(predicate: (Set<ReplicaTag>) -> Boolean)",
    "description": "me.aartikov.replica.client.clearByTags",
    "location": "replica-core/me.aartikov.replica.client/clear-by-tags.html",
    "searchKeys": [
      "clearByTags",
      "suspend fun ReplicaClient.clearByTags(predicate: (Set<ReplicaTag>) -> Boolean)",
      "me.aartikov.replica.client.clearByTags"
    ]
  },
  {
    "name": "suspend fun ReplicaClient.invalidateAll(mode: InvalidationMode = InvalidationMode.RefreshIfHasObservers)",
    "description": "me.aartikov.replica.client.invalidateAll",
    "location": "replica-core/me.aartikov.replica.client/invalidate-all.html",
    "searchKeys": [
      "invalidateAll",
      "suspend fun ReplicaClient.invalidateAll(mode: InvalidationMode = InvalidationMode.RefreshIfHasObservers)",
      "me.aartikov.replica.client.invalidateAll"
    ]
  },
  {
    "name": "suspend fun ReplicaClient.invalidateByTags(mode: InvalidationMode = InvalidationMode.RefreshIfHasObservers, predicate: (Set<ReplicaTag>) -> Boolean)",
    "description": "me.aartikov.replica.client.invalidateByTags",
    "location": "replica-core/me.aartikov.replica.client/invalidate-by-tags.html",
    "searchKeys": [
      "invalidateByTags",
      "suspend fun ReplicaClient.invalidateByTags(mode: InvalidationMode = InvalidationMode.RefreshIfHasObservers, predicate: (Set<ReplicaTag>) -> Boolean)",
      "me.aartikov.replica.client.invalidateByTags"
    ]
  },
  {
    "name": "val <K : Any, T : Any> KeyedPhysicalReplica<K, T>.currentState: KeyedReplicaState",
    "description": "me.aartikov.replica.keyed.currentState",
    "location": "replica-core/me.aartikov.replica.keyed/current-state.html",
    "searchKeys": [
      "currentState",
      "val <K : Any, T : Any> KeyedPhysicalReplica<K, T>.currentState: KeyedReplicaState",
      "me.aartikov.replica.keyed.currentState"
    ]
  },
  {
    "name": "val <T : Any> PhysicalReplica<T>.currentState: ReplicaState<T>",
    "description": "me.aartikov.replica.single.currentState",
    "location": "replica-core/me.aartikov.replica.single/current-state.html",
    "searchKeys": [
      "currentState",
      "val <T : Any> PhysicalReplica<T>.currentState: ReplicaState<T>",
      "me.aartikov.replica.single.currentState"
    ]
  },
  {
    "name": "val <T : Any> ReplicaObserver<T>.currentState: Loadable<T>",
    "description": "me.aartikov.replica.single.currentState",
    "location": "replica-core/me.aartikov.replica.single/current-state.html",
    "searchKeys": [
      "currentState",
      "val <T : Any> ReplicaObserver<T>.currentState: Loadable<T>",
      "me.aartikov.replica.single.currentState"
    ]
  },
  {
    "name": "val DefaultCoroutineScope: CoroutineScope",
    "description": "me.aartikov.replica.client.ReplicaClient.Companion.DefaultCoroutineScope",
    "location": "replica-core/me.aartikov.replica.client/-replica-client/-companion/-default-coroutine-scope.html",
    "searchKeys": [
      "DefaultCoroutineScope",
      "val DefaultCoroutineScope: CoroutineScope",
      "me.aartikov.replica.client.ReplicaClient.Companion.DefaultCoroutineScope"
    ]
  },
  {
    "name": "val Empty: KeyedReplicaState",
    "description": "me.aartikov.replica.keyed.KeyedReplicaState.Companion.Empty",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica-state/-companion/-empty.html",
    "searchKeys": [
      "Empty",
      "val Empty: KeyedReplicaState",
      "me.aartikov.replica.keyed.KeyedReplicaState.Companion.Empty"
    ]
  },
  {
    "name": "val NetworkConnectivityProvider.connected: Boolean",
    "description": "me.aartikov.replica.network.connected",
    "location": "replica-core/me.aartikov.replica.network/connected.html",
    "searchKeys": [
      "connected",
      "val NetworkConnectivityProvider.connected: Boolean",
      "me.aartikov.replica.network.connected"
    ]
  },
  {
    "name": "val WithoutBehaviour: ReplicaSettings",
    "description": "me.aartikov.replica.single.ReplicaSettings.Companion.WithoutBehaviour",
    "location": "replica-core/me.aartikov.replica.single/-replica-settings/-companion/-without-behaviour.html",
    "searchKeys": [
      "WithoutBehaviour",
      "val WithoutBehaviour: ReplicaSettings",
      "me.aartikov.replica.single.ReplicaSettings.Companion.WithoutBehaviour"
    ]
  },
  {
    "name": "val activeCount: Int",
    "description": "me.aartikov.replica.single.ReplicaEvent.ObserverCountChangedEvent.activeCount",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/-observer-count-changed-event/active-count.html",
    "searchKeys": [
      "activeCount",
      "val activeCount: Int",
      "me.aartikov.replica.single.ReplicaEvent.ObserverCountChangedEvent.activeCount"
    ]
  },
  {
    "name": "val activeObserverCount: Int",
    "description": "me.aartikov.replica.common.ObservingState.activeObserverCount",
    "location": "replica-core/me.aartikov.replica.common/-observing-state/active-observer-count.html",
    "searchKeys": [
      "activeObserverCount",
      "val activeObserverCount: Int",
      "me.aartikov.replica.common.ObservingState.activeObserverCount"
    ]
  },
  {
    "name": "val activeObserverUuids: Set<String>",
    "description": "me.aartikov.replica.common.ObservingState.activeObserverUuids",
    "location": "replica-core/me.aartikov.replica.common/-observing-state/active-observer-uuids.html",
    "searchKeys": [
      "activeObserverUuids",
      "val activeObserverUuids: Set<String>",
      "me.aartikov.replica.common.ObservingState.activeObserverUuids"
    ]
  },
  {
    "name": "val cancelTime: Duration?",
    "description": "me.aartikov.replica.single.ReplicaSettings.cancelTime",
    "location": "replica-core/me.aartikov.replica.single/-replica-settings/cancel-time.html",
    "searchKeys": [
      "cancelTime",
      "val cancelTime: Duration?",
      "me.aartikov.replica.single.ReplicaSettings.cancelTime"
    ]
  },
  {
    "name": "val changingTime: Instant",
    "description": "me.aartikov.replica.single.ReplicaData.changingTime",
    "location": "replica-core/me.aartikov.replica.single/-replica-data/changing-time.html",
    "searchKeys": [
      "changingTime",
      "val changingTime: Instant",
      "me.aartikov.replica.single.ReplicaData.changingTime"
    ]
  },
  {
    "name": "val clearErrorTime: Duration?",
    "description": "me.aartikov.replica.single.ReplicaSettings.clearErrorTime",
    "location": "replica-core/me.aartikov.replica.single/-replica-settings/clear-error-time.html",
    "searchKeys": [
      "clearErrorTime",
      "val clearErrorTime: Duration?",
      "me.aartikov.replica.single.ReplicaSettings.clearErrorTime"
    ]
  },
  {
    "name": "val clearOrder: ClearOrder<K, T>",
    "description": "me.aartikov.replica.keyed.ClearPolicy.clearOrder",
    "location": "replica-core/me.aartikov.replica.keyed/-clear-policy/clear-order.html",
    "searchKeys": [
      "clearOrder",
      "val clearOrder: ClearOrder<K, T>",
      "me.aartikov.replica.keyed.ClearPolicy.clearOrder"
    ]
  },
  {
    "name": "val clearPolicy: ClearPolicy<K, T>",
    "description": "me.aartikov.replica.keyed.KeyedReplicaSettings.clearPolicy",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica-settings/clear-policy.html",
    "searchKeys": [
      "clearPolicy",
      "val clearPolicy: ClearPolicy<K, T>",
      "me.aartikov.replica.keyed.KeyedReplicaSettings.clearPolicy"
    ]
  },
  {
    "name": "val clearTime: Duration? = null",
    "description": "me.aartikov.replica.single.ReplicaSettings.clearTime",
    "location": "replica-core/me.aartikov.replica.single/-replica-settings/clear-time.html",
    "searchKeys": [
      "clearTime",
      "val clearTime: Duration? = null",
      "me.aartikov.replica.single.ReplicaSettings.clearTime"
    ]
  },
  {
    "name": "val comparator: Comparator<Pair<K, ReplicaState<T>>>",
    "description": "me.aartikov.replica.keyed.ClearOrder.CustomComparator.comparator",
    "location": "replica-core/me.aartikov.replica.keyed/-clear-order/-custom-comparator/comparator.html",
    "searchKeys": [
      "comparator",
      "val comparator: Comparator<Pair<K, ReplicaState<T>>>",
      "me.aartikov.replica.keyed.ClearOrder.CustomComparator.comparator"
    ]
  },
  {
    "name": "val count: Int",
    "description": "me.aartikov.replica.single.ReplicaEvent.ObserverCountChangedEvent.count",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/-observer-count-changed-event/count.html",
    "searchKeys": [
      "count",
      "val count: Int",
      "me.aartikov.replica.single.ReplicaEvent.ObserverCountChangedEvent.count"
    ]
  },
  {
    "name": "val data: ReplicaData<T>?",
    "description": "me.aartikov.replica.single.ReplicaState.data",
    "location": "replica-core/me.aartikov.replica.single/-replica-state/data.html",
    "searchKeys": [
      "data",
      "val data: ReplicaData<T>?",
      "me.aartikov.replica.single.ReplicaState.data"
    ]
  },
  {
    "name": "val data: T",
    "description": "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.DataFromStorageLoaded.data",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/-loading-event/-data-from-storage-loaded/data.html",
    "searchKeys": [
      "data",
      "val data: T",
      "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.DataFromStorageLoaded.data"
    ]
  },
  {
    "name": "val data: T",
    "description": "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.LoadingFinished.Success.data",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/-loading-event/-loading-finished/-success/data.html",
    "searchKeys": [
      "data",
      "val data: T",
      "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.LoadingFinished.Success.data"
    ]
  },
  {
    "name": "val data: T? = null",
    "description": "me.aartikov.replica.single.Loadable.data",
    "location": "replica-core/me.aartikov.replica.single/-loadable/data.html",
    "searchKeys": [
      "data",
      "val data: T? = null",
      "me.aartikov.replica.single.Loadable.data"
    ]
  },
  {
    "name": "val dataRequested: Boolean",
    "description": "me.aartikov.replica.single.ReplicaState.dataRequested",
    "location": "replica-core/me.aartikov.replica.single/-replica-state/data-requested.html",
    "searchKeys": [
      "dataRequested",
      "val dataRequested: Boolean",
      "me.aartikov.replica.single.ReplicaState.dataRequested"
    ]
  },
  {
    "name": "val error: CombinedLoadingError? = null",
    "description": "me.aartikov.replica.single.Loadable.error",
    "location": "replica-core/me.aartikov.replica.single/-loadable/error.html",
    "searchKeys": [
      "error",
      "val error: CombinedLoadingError? = null",
      "me.aartikov.replica.single.Loadable.error"
    ]
  },
  {
    "name": "val error: LoadingError?",
    "description": "me.aartikov.replica.single.ReplicaState.error",
    "location": "replica-core/me.aartikov.replica.single/-replica-state/error.html",
    "searchKeys": [
      "error",
      "val error: LoadingError?",
      "me.aartikov.replica.single.ReplicaState.error"
    ]
  },
  {
    "name": "val exception: Exception",
    "description": "me.aartikov.replica.common.CombinedLoadingError.exception",
    "location": "replica-core/me.aartikov.replica.common/-combined-loading-error/exception.html",
    "searchKeys": [
      "exception",
      "val exception: Exception",
      "me.aartikov.replica.common.CombinedLoadingError.exception"
    ]
  },
  {
    "name": "val exception: Exception",
    "description": "me.aartikov.replica.common.LoadingError.exception",
    "location": "replica-core/me.aartikov.replica.common/-loading-error/exception.html",
    "searchKeys": [
      "exception",
      "val exception: Exception",
      "me.aartikov.replica.common.LoadingError.exception"
    ]
  },
  {
    "name": "val exception: Exception",
    "description": "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.LoadingFinished.Error.exception",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/-loading-event/-loading-finished/-error/exception.html",
    "searchKeys": [
      "exception",
      "val exception: Exception",
      "me.aartikov.replica.single.ReplicaEvent.LoadingEvent.LoadingFinished.Error.exception"
    ]
  },
  {
    "name": "val exceptions: List<Exception>",
    "description": "me.aartikov.replica.common.CombinedLoadingError.exceptions",
    "location": "replica-core/me.aartikov.replica.common/-combined-loading-error/exceptions.html",
    "searchKeys": [
      "exceptions",
      "val exceptions: List<Exception>",
      "me.aartikov.replica.common.CombinedLoadingError.exceptions"
    ]
  },
  {
    "name": "val fresh: Boolean",
    "description": "me.aartikov.replica.single.ReplicaData.fresh",
    "location": "replica-core/me.aartikov.replica.single/-replica-data/fresh.html",
    "searchKeys": [
      "fresh",
      "val fresh: Boolean",
      "me.aartikov.replica.single.ReplicaData.fresh"
    ]
  },
  {
    "name": "val hasFreshData: Boolean",
    "description": "me.aartikov.replica.single.ReplicaState.hasFreshData",
    "location": "replica-core/me.aartikov.replica.single/-replica-state/has-fresh-data.html",
    "searchKeys": [
      "hasFreshData",
      "val hasFreshData: Boolean",
      "me.aartikov.replica.single.ReplicaState.hasFreshData"
    ]
  },
  {
    "name": "val isPrivilegedReplica: (Pair<K, ReplicaState<T>>) -> Boolean? = null",
    "description": "me.aartikov.replica.keyed.ClearPolicy.isPrivilegedReplica",
    "location": "replica-core/me.aartikov.replica.keyed/-clear-policy/is-privileged-replica.html",
    "searchKeys": [
      "isPrivilegedReplica",
      "val isPrivilegedReplica: (Pair<K, ReplicaState<T>>) -> Boolean? = null",
      "me.aartikov.replica.keyed.ClearPolicy.isPrivilegedReplica"
    ]
  },
  {
    "name": "val key: K",
    "description": "me.aartikov.replica.keyed.KeyedReplicaEvent.ReplicaCreated.key",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica-event/-replica-created/key.html",
    "searchKeys": [
      "key",
      "val key: K",
      "me.aartikov.replica.keyed.KeyedReplicaEvent.ReplicaCreated.key"
    ]
  },
  {
    "name": "val key: K",
    "description": "me.aartikov.replica.keyed.KeyedReplicaEvent.ReplicaRemoved.key",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica-event/-replica-removed/key.html",
    "searchKeys": [
      "key",
      "val key: K",
      "me.aartikov.replica.keyed.KeyedReplicaEvent.ReplicaRemoved.key"
    ]
  },
  {
    "name": "val keyedReplica: KeyedPhysicalReplica<*, *>",
    "description": "me.aartikov.replica.client.ReplicaClientEvent.KeyedReplicaCreated.keyedReplica",
    "location": "replica-core/me.aartikov.replica.client/-replica-client-event/-keyed-replica-created/keyed-replica.html",
    "searchKeys": [
      "keyedReplica",
      "val keyedReplica: KeyedPhysicalReplica<*, *>",
      "me.aartikov.replica.client.ReplicaClientEvent.KeyedReplicaCreated.keyedReplica"
    ]
  },
  {
    "name": "val loading: Boolean",
    "description": "me.aartikov.replica.single.ReplicaState.loading",
    "location": "replica-core/me.aartikov.replica.single/-replica-state/loading.html",
    "searchKeys": [
      "loading",
      "val loading: Boolean",
      "me.aartikov.replica.single.ReplicaState.loading"
    ]
  },
  {
    "name": "val loading: Boolean = false",
    "description": "me.aartikov.replica.single.Loadable.loading",
    "location": "replica-core/me.aartikov.replica.single/-loadable/loading.html",
    "searchKeys": [
      "loading",
      "val loading: Boolean = false",
      "me.aartikov.replica.single.Loadable.loading"
    ]
  },
  {
    "name": "val loadingFromStorageRequired: Boolean",
    "description": "me.aartikov.replica.single.ReplicaState.loadingFromStorageRequired",
    "location": "replica-core/me.aartikov.replica.single/-replica-state/loading-from-storage-required.html",
    "searchKeys": [
      "loadingFromStorageRequired",
      "val loadingFromStorageRequired: Boolean",
      "me.aartikov.replica.single.ReplicaState.loadingFromStorageRequired"
    ]
  },
  {
    "name": "val maxCount: Int",
    "description": "me.aartikov.replica.keyed.KeyedReplicaSettings.maxCount",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica-settings/max-count.html",
    "searchKeys": [
      "maxCount",
      "val maxCount: Int",
      "me.aartikov.replica.keyed.KeyedReplicaSettings.maxCount"
    ]
  },
  {
    "name": "val observerCount: Int",
    "description": "me.aartikov.replica.common.ObservingState.observerCount",
    "location": "replica-core/me.aartikov.replica.common/-observing-state/observer-count.html",
    "searchKeys": [
      "observerCount",
      "val observerCount: Int",
      "me.aartikov.replica.common.ObservingState.observerCount"
    ]
  },
  {
    "name": "val observerUuids: Set<String>",
    "description": "me.aartikov.replica.common.ObservingState.observerUuids",
    "location": "replica-core/me.aartikov.replica.common/-observing-state/observer-uuids.html",
    "searchKeys": [
      "observerUuids",
      "val observerUuids: Set<String>",
      "me.aartikov.replica.common.ObservingState.observerUuids"
    ]
  },
  {
    "name": "val observingState: ObservingState",
    "description": "me.aartikov.replica.single.ReplicaState.observingState",
    "location": "replica-core/me.aartikov.replica.single/-replica-state/observing-state.html",
    "searchKeys": [
      "observingState",
      "val observingState: ObservingState",
      "me.aartikov.replica.single.ReplicaState.observingState"
    ]
  },
  {
    "name": "val observingTime: ObservingTime",
    "description": "me.aartikov.replica.common.ObservingState.observingTime",
    "location": "replica-core/me.aartikov.replica.common/-observing-state/observing-time.html",
    "searchKeys": [
      "observingTime",
      "val observingTime: ObservingTime",
      "me.aartikov.replica.common.ObservingState.observingTime"
    ]
  },
  {
    "name": "val optimisticUpdates: List<OptimisticUpdate<T>>",
    "description": "me.aartikov.replica.single.ReplicaData.optimisticUpdates",
    "location": "replica-core/me.aartikov.replica.single/-replica-data/optimistic-updates.html",
    "searchKeys": [
      "optimisticUpdates",
      "val optimisticUpdates: List<OptimisticUpdate<T>>",
      "me.aartikov.replica.single.ReplicaData.optimisticUpdates"
    ]
  },
  {
    "name": "val preloading: Boolean",
    "description": "me.aartikov.replica.single.ReplicaState.preloading",
    "location": "replica-core/me.aartikov.replica.single/-replica-state/preloading.html",
    "searchKeys": [
      "preloading",
      "val preloading: Boolean",
      "me.aartikov.replica.single.ReplicaState.preloading"
    ]
  },
  {
    "name": "val previousActiveCount: Int",
    "description": "me.aartikov.replica.single.ReplicaEvent.ObserverCountChangedEvent.previousActiveCount",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/-observer-count-changed-event/previous-active-count.html",
    "searchKeys": [
      "previousActiveCount",
      "val previousActiveCount: Int",
      "me.aartikov.replica.single.ReplicaEvent.ObserverCountChangedEvent.previousActiveCount"
    ]
  },
  {
    "name": "val previousCount: Int",
    "description": "me.aartikov.replica.single.ReplicaEvent.ObserverCountChangedEvent.previousCount",
    "location": "replica-core/me.aartikov.replica.single/-replica-event/-observer-count-changed-event/previous-count.html",
    "searchKeys": [
      "previousCount",
      "val previousCount: Int",
      "me.aartikov.replica.single.ReplicaEvent.ObserverCountChangedEvent.previousCount"
    ]
  },
  {
    "name": "val replica: PhysicalReplica<*>",
    "description": "me.aartikov.replica.client.ReplicaClientEvent.ReplicaCreated.replica",
    "location": "replica-core/me.aartikov.replica.client/-replica-client-event/-replica-created/replica.html",
    "searchKeys": [
      "replica",
      "val replica: PhysicalReplica<*>",
      "me.aartikov.replica.client.ReplicaClientEvent.ReplicaCreated.replica"
    ]
  },
  {
    "name": "val replica: PhysicalReplica<T>",
    "description": "me.aartikov.replica.keyed.KeyedReplicaEvent.ReplicaCreated.replica",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica-event/-replica-created/replica.html",
    "searchKeys": [
      "replica",
      "val replica: PhysicalReplica<T>",
      "me.aartikov.replica.keyed.KeyedReplicaEvent.ReplicaCreated.replica"
    ]
  },
  {
    "name": "val replicaCount: Int",
    "description": "me.aartikov.replica.keyed.KeyedReplicaState.replicaCount",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica-state/replica-count.html",
    "searchKeys": [
      "replicaCount",
      "val replicaCount: Int",
      "me.aartikov.replica.keyed.KeyedReplicaState.replicaCount"
    ]
  },
  {
    "name": "val replicaId: ReplicaId",
    "description": "me.aartikov.replica.keyed.KeyedReplicaEvent.ReplicaRemoved.replicaId",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica-event/-replica-removed/replica-id.html",
    "searchKeys": [
      "replicaId",
      "val replicaId: ReplicaId",
      "me.aartikov.replica.keyed.KeyedReplicaEvent.ReplicaRemoved.replicaId"
    ]
  },
  {
    "name": "val replicaWithActiveObserversCount: Int",
    "description": "me.aartikov.replica.keyed.KeyedReplicaState.replicaWithActiveObserversCount",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica-state/replica-with-active-observers-count.html",
    "searchKeys": [
      "replicaWithActiveObserversCount",
      "val replicaWithActiveObserversCount: Int",
      "me.aartikov.replica.keyed.KeyedReplicaState.replicaWithActiveObserversCount"
    ]
  },
  {
    "name": "val replicaWithObserversCount: Int",
    "description": "me.aartikov.replica.keyed.KeyedReplicaState.replicaWithObserversCount",
    "location": "replica-core/me.aartikov.replica.keyed/-keyed-replica-state/replica-with-observers-count.html",
    "searchKeys": [
      "replicaWithObserversCount",
      "val replicaWithObserversCount: Int",
      "me.aartikov.replica.keyed.KeyedReplicaState.replicaWithObserversCount"
    ]
  },
  {
    "name": "val revalidateOnActiveObserverAdded: Boolean = true",
    "description": "me.aartikov.replica.single.ReplicaSettings.revalidateOnActiveObserverAdded",
    "location": "replica-core/me.aartikov.replica.single/-replica-settings/revalidate-on-active-observer-added.html",
    "searchKeys": [
      "revalidateOnActiveObserverAdded",
      "val revalidateOnActiveObserverAdded: Boolean = true",
      "me.aartikov.replica.single.ReplicaSettings.revalidateOnActiveObserverAdded"
    ]
  },
  {
    "name": "val revalidateOnNetworkConnection: Boolean = true",
    "description": "me.aartikov.replica.single.ReplicaSettings.revalidateOnNetworkConnection",
    "location": "replica-core/me.aartikov.replica.single/-replica-settings/revalidate-on-network-connection.html",
    "searchKeys": [
      "revalidateOnNetworkConnection",
      "val revalidateOnNetworkConnection: Boolean = true",
      "me.aartikov.replica.single.ReplicaSettings.revalidateOnNetworkConnection"
    ]
  },
  {
    "name": "val staleTime: Duration?",
    "description": "me.aartikov.replica.single.ReplicaSettings.staleTime",
    "location": "replica-core/me.aartikov.replica.single/-replica-settings/stale-time.html",
    "searchKeys": [
      "staleTime",
      "val staleTime: Duration?",
      "me.aartikov.replica.single.ReplicaSettings.staleTime"
    ]
  },
  {
    "name": "val status: ObservingStatus",
    "description": "me.aartikov.replica.common.ObservingState.status",
    "location": "replica-core/me.aartikov.replica.common/-observing-state/status.html",
    "searchKeys": [
      "status",
      "val status: ObservingStatus",
      "me.aartikov.replica.common.ObservingState.status"
    ]
  },
  {
    "name": "val time: Instant",
    "description": "me.aartikov.replica.common.ObservingTime.TimeInPast.time",
    "location": "replica-core/me.aartikov.replica.common/-observing-time/-time-in-past/time.html",
    "searchKeys": [
      "time",
      "val time: Instant",
      "me.aartikov.replica.common.ObservingTime.TimeInPast.time"
    ]
  },
  {
    "name": "val value: String",
    "description": "me.aartikov.replica.common.ReplicaId.value",
    "location": "replica-core/me.aartikov.replica.common/-replica-id/value.html",
    "searchKeys": [
      "value",
      "val value: String",
      "me.aartikov.replica.common.ReplicaId.value"
    ]
  },
  {
    "name": "val value: T",
    "description": "me.aartikov.replica.single.ReplicaData.value",
    "location": "replica-core/me.aartikov.replica.single/-replica-data/value.html",
    "searchKeys": [
      "value",
      "val value: T",
      "me.aartikov.replica.single.ReplicaData.value"
    ]
  },
  {
    "name": "val valueWithOptimisticUpdates: T",
    "description": "me.aartikov.replica.single.ReplicaData.valueWithOptimisticUpdates",
    "location": "replica-core/me.aartikov.replica.single/-replica-data/value-with-optimistic-updates.html",
    "searchKeys": [
      "valueWithOptimisticUpdates",
      "val valueWithOptimisticUpdates: T",
      "me.aartikov.replica.single.ReplicaData.valueWithOptimisticUpdates"
    ]
  },
  {
    "name": "value class ReplicaId(val value: String)",
    "description": "me.aartikov.replica.common.ReplicaId",
    "location": "replica-core/me.aartikov.replica.common/-replica-id/index.html",
    "searchKeys": [
      "ReplicaId",
      "value class ReplicaId(val value: String)",
      "me.aartikov.replica.common.ReplicaId"
    ]
  },
  {
    "name": "abstract val activeFlow: MutableStateFlow<Boolean>",
    "description": "me.aartikov.replica.view_model.Activable.activeFlow",
    "location": "replica-view-model/me.aartikov.replica.view_model/-activable/active-flow.html",
    "searchKeys": [
      "activeFlow",
      "abstract val activeFlow: MutableStateFlow<Boolean>",
      "me.aartikov.replica.view_model.Activable.activeFlow"
    ]
  },
  {
    "name": "fun <T : Any, VM : ViewModel, Activable> Replica<T>.observe(viewModel: VM): ReplicaObserver<T>",
    "description": "me.aartikov.replica.view_model.observe",
    "location": "replica-view-model/me.aartikov.replica.view_model/observe.html",
    "searchKeys": [
      "observe",
      "fun <T : Any, VM : ViewModel, Activable> Replica<T>.observe(viewModel: VM): ReplicaObserver<T>",
      "me.aartikov.replica.view_model.observe"
    ]
  },
  {
    "name": "fun Activable.bindToLifecycle(lifecycle: Lifecycle)",
    "description": "me.aartikov.replica.view_model.bindToLifecycle",
    "location": "replica-view-model/me.aartikov.replica.view_model/bind-to-lifecycle.html",
    "searchKeys": [
      "bindToLifecycle",
      "fun Activable.bindToLifecycle(lifecycle: Lifecycle)",
      "me.aartikov.replica.view_model.bindToLifecycle"
    ]
  },
  {
    "name": "fun activable(): Activable",
    "description": "me.aartikov.replica.view_model.activable",
    "location": "replica-view-model/me.aartikov.replica.view_model/activable.html",
    "searchKeys": [
      "activable",
      "fun activable(): Activable",
      "me.aartikov.replica.view_model.activable"
    ]
  },
  {
    "name": "interface Activable",
    "description": "me.aartikov.replica.view_model.Activable",
    "location": "replica-view-model/me.aartikov.replica.view_model/-activable/index.html",
    "searchKeys": [
      "Activable",
      "interface Activable",
      "me.aartikov.replica.view_model.Activable"
    ]
  }
]