apply plugin: 'maven-publish'
apply plugin: 'signing'

/**
 * publish:
 * ./gradlew build
 * ./gradlew publishAllPublicationsToSonatypeRepository
 */

ext {
    PUBLISH_GROUP_ID = 'com.github.aartikov'
    PUBLISH_VERSION = '1.0.0-alpha13'
    DESCRIPTION = 'Android libary for organizing of network communication in a declarative way'

    GITHUB_USER = 'aartikov'
    GITHUB_PROJECT = 'Replica'
    LICENSE_NAME = 'The MIT License'
    LICENSE_URL = "https://github.com/${GITHUB_USER}/${GITHUB_PROJECT}/blob/master/LICENSE"

    DEVELOPER_ID = 'aartikov'
    DEVELOPER_NAME = 'Artur Artikov'
    DEVELOPER_EMAIL = 'a.artikov@gmail.com'
}

def isAndroidLibrary = project.plugins.findPlugin('com.android.library') != null

if (tasks.findByPath('dokkaHtml') != null) {
    task javadocJar(type: Jar, dependsOn: dokkaHtml) {
        archiveClassifier.set('javadoc')
        from dokkaHtml.outputDirectory
    }
} else {
    // empty jar
    task javadocJar(type: Jar) {
        archiveClassifier.set('javadoc')
    }
}


group = PUBLISH_GROUP_ID
version = PUBLISH_VERSION

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
}

// KMM plugin generates publication automatically, but Android plugin doesn't. So create it here.
if (isAndroidLibrary) {
    publishing {
        publications {
            release(MavenPublication) {
                groupId PUBLISH_GROUP_ID
                artifactId project.name
                version PUBLISH_VERSION

                afterEvaluate {
                    from components.release
                }
            }
        }
    }
}

// Configure created publications to fit Sonatype requirements.
publishing {
    publications {
        withType(MavenPublication) {
            artifact javadocJar

            pom {
                name = project.name
                description = DESCRIPTION
                url = "https://github.com/${GITHUB_USER}/${GITHUB_PROJECT}"

                licenses {
                    license {
                        name = LICENSE_NAME
                        url = LICENSE_URL
                    }
                }

                developers {
                    developer {
                        id = DEVELOPER_ID
                        name = DEVELOPER_NAME
                        email = DEVELOPER_EMAIL
                    }
                }

                scm {
                    connection = "scm:git:github.com/${GITHUB_USER}/${GITHUB_PROJECT}.git"
                    developerConnection = "scm:git:ssh://github.com/${GITHUB_USER}/${GITHUB_PROJECT}.git"
                    url = "https://github.com/${GITHUB_USER}/${GITHUB_PROJECT}/tree/main"
                }
            }
        }
    }

    repositories {
        maven {
            name = "sonatype"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications
}